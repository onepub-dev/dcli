The request analysis.updateContent failed with the following error:
RequestErrorCode.PLUGIN_ERROR
A request threw the exception:Invalid overlay change: no content to change
null
at:
#0      SocketCustomLintServerToClientChannel.sendCustomLintRequest (package:custom_lint/src/v2/server_to_client_channel.dart:273)
<asynchronous suspension>
#1      SocketCustomLintServerToClientChannel.sendAnalyzerPluginRequest (package:custom_lint/src/v2/server_to_client_channel.dart:234)
<asynchronous suspension>
#2      CustomLintServer._handleRequest.<anonymous closure>.<anonymous closure> (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:192)
<asynchronous suspension>
#3      PendingOperation.run (package:custom_lint/src/async_operation.dart:22)
<asynchronous suspension>
#4      CustomLintServer._handleRequest (package:custom_lint/src/v2/custom_lint_analyzer_plugin.dart:175)
<asynchronous suspension>

[ReorderMembersFix] 2025-10-18T11:44:56.279632 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.279632 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.279632 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.279632
[ReorderMembersFix] 2025-10-18T11:44:56.279817 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.279817 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.279817 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.279817
[ReorderMembersFix] 2025-10-18T11:44:56.280028 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280028 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280028 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280028
[ReorderMembersFix] 2025-10-18T11:44:56.280126 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280126 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280126 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280126
[ReorderMembersFix] 2025-10-18T11:44:56.280238 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280238 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280238 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280238
[ReorderMembersFix] 2025-10-18T11:44:56.280337 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280337 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280337 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280337
[ReorderMembersFix] 2025-10-18T11:44:56.280456 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280456 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280456 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280456
[ReorderMembersFix] 2025-10-18T11:44:56.280581 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280581 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280581 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280581
[ReorderMembersFix] 2025-10-18T11:44:56.280765 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280765 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280765 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280765
[ReorderMembersFix] 2025-10-18T11:44:56.280858 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280858 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280858 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280858
[ReorderMembersFix] 2025-10-18T11:44:56.280951 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.280951 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.280951 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.280951
[ReorderMembersFix] 2025-10-18T11:44:56.281052 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.281052 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.281052 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.281052
[ReorderMembersFix] 2025-10-18T11:44:56.283261 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.283261 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283261 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.283261
[ReorderMembersFix] 2025-10-18T11:44:56.283378 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.283378 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283378 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.283378
[ReorderMembersFix] 2025-10-18T11:44:56.283554 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.283554 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283554 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.283554
[ReorderMembersFix] 2025-10-18T11:44:56.283669 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.283669 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283669 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.283669
[ReorderMembersFix] 2025-10-18T11:44:56.283934 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.283934 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.283934 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.283934
[ReorderMembersFix] 2025-10-18T11:44:56.284084 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.284084 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284084 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.284084
[ReorderMembersFix] 2025-10-18T11:44:56.284229 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.284229 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284229 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.284229
[ReorderMembersFix] 2025-10-18T11:44:56.284362 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.284362 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284362 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.284362
[ReorderMembersFix] 2025-10-18T11:44:56.284614 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.284614 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284614 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.284614
[ReorderMembersFix] 2025-10-18T11:44:56.284818 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.284818 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.284818 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.284818
[ReorderMembersFix] 2025-10-18T11:44:56.285029 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.285029 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.285029 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.285029
[ReorderMembersFix] 2025-10-18T11:44:56.285248 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.285248 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.285248 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.285248
[ReorderMembersFix] 2025-10-18T11:44:56.323074 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.323074 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323074 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.323074
[ReorderMembersFix] 2025-10-18T11:44:56.323251 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.323251 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323251 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.323251
[ReorderMembersFix] 2025-10-18T11:44:56.323462 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.323462 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323462 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.323462
[ReorderMembersFix] 2025-10-18T11:44:56.323580 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.323580 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323580 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.323580
[ReorderMembersFix] 2025-10-18T11:44:56.323704 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.323704 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323704 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.323704
[ReorderMembersFix] 2025-10-18T11:44:56.323802 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.323802 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.323802 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.323802
[ReorderMembersFix] 2025-10-18T11:44:56.545816 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.545816 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.545816 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.545816
[ReorderMembersFix] 2025-10-18T11:44:56.547484 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.547484 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.547484 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.547484
[ReorderMembersFix] 2025-10-18T11:44:56.547800 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.547800 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.547800 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.547800
[ReorderMembersFix] 2025-10-18T11:44:56.548058 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.548058 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.548058 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.548058
[ReorderMembersFix] 2025-10-18T11:44:56.548277 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.548277 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.548277 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.548277
[ReorderMembersFix] 2025-10-18T11:44:56.548489 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.548489 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.548489 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.548489
[ReorderMembersFix] 2025-10-18T11:44:56.549976 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.549976 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.549976 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.549976
[ReorderMembersFix] 2025-10-18T11:44:56.550199 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.550199 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.550199 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.550199
[ReorderMembersFix] 2025-10-18T11:44:56.550573 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.550573 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.550573 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.550573
[ReorderMembersFix] 2025-10-18T11:44:56.550803 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.550803 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.550803 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.550803
[ReorderMembersFix] 2025-10-18T11:44:56.551013 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.551013 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.551013 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.551013
[ReorderMembersFix] 2025-10-18T11:44:56.551233 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.551233 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.551233 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.551233
[ReorderMembersFix] 2025-10-18T11:44:56.552517 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.552517 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.552517 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.552517
[ReorderMembersFix] 2025-10-18T11:44:56.552700 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.552700 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.552700 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.552700
[ReorderMembersFix] 2025-10-18T11:44:56.553062 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.553062 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.553062 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.553062
[ReorderMembersFix] 2025-10-18T11:44:56.553251 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.553251 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.553251 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.553251
[ReorderMembersFix] 2025-10-18T11:44:56.553450 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.553450 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.553450 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.553450
[ReorderMembersFix] 2025-10-18T11:44:56.553660 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.553660 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.553660 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.553660
[ReorderMembersFix] 2025-10-18T11:44:56.555119 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.555119 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.555119 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.555119
[ReorderMembersFix] 2025-10-18T11:44:56.555320 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.555320 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.555320 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.555320
[ReorderMembersFix] 2025-10-18T11:44:56.555769 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.555769 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.555769 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.555769
[ReorderMembersFix] 2025-10-18T11:44:56.556025 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.556025 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.556025 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.556025
[ReorderMembersFix] 2025-10-18T11:44:56.556260 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.556260 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.556260 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.556260
[ReorderMembersFix] 2025-10-18T11:44:56.556492 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.556492 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.556492 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.556492
[ReorderMembersFix] 2025-10-18T11:44:56.558888 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.558888 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.558888 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.558888
[ReorderMembersFix] 2025-10-18T11:44:56.559075 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.559075 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559075 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.559075
[ReorderMembersFix] 2025-10-18T11:44:56.559358 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.559358 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559358 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.559358
[ReorderMembersFix] 2025-10-18T11:44:56.559527 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.559527 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559527 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.559527
[ReorderMembersFix] 2025-10-18T11:44:56.559693 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.559693 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559693 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.559693
[ReorderMembersFix] 2025-10-18T11:44:56.559865 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:56.559865 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:56.559865 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:56.559865
[ReorderMembersFix] 2025-10-18T11:44:57.444756 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.444756 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.444756 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.444756
[ReorderMembersFix] 2025-10-18T11:44:57.445866 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.445866 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.445866 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.445866
[ReorderMembersFix] 2025-10-18T11:44:57.446211 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.446211 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.446211 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.446211
[ReorderMembersFix] 2025-10-18T11:44:57.446422 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.446422 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.446422 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.446422
[ReorderMembersFix] 2025-10-18T11:44:57.446643 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.446643 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.446643 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.446643
[ReorderMembersFix] 2025-10-18T11:44:57.446882 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.446882 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.446882 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.446882
[ReorderMembersFix] 2025-10-18T11:44:57.448289 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.448289 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448289 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.448289
[ReorderMembersFix] 2025-10-18T11:44:57.448473 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.448473 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448473 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.448473
[ReorderMembersFix] 2025-10-18T11:44:57.448692 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.448692 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448692 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.448692
[ReorderMembersFix] 2025-10-18T11:44:57.448803 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.448803 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448803 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.448803
[ReorderMembersFix] 2025-10-18T11:44:57.448912 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.448912 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.448912 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.448912
[ReorderMembersFix] 2025-10-18T11:44:57.449038 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.449038 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.449038 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.449038
[ReorderMembersFix] 2025-10-18T11:44:57.450189 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.450189 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.450189 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.450189
[ReorderMembersFix] 2025-10-18T11:44:57.450377 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.450377 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.450377 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.450377
[ReorderMembersFix] 2025-10-18T11:44:57.450671 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.450671 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.450671 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.450671
[ReorderMembersFix] 2025-10-18T11:44:57.450881 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.450881 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.450881 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.450881
[ReorderMembersFix] 2025-10-18T11:44:57.451114 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.451114 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.451114 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.451114
[ReorderMembersFix] 2025-10-18T11:44:57.451340 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.451340 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.451340 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.451340
[ReorderMembersFix] 2025-10-18T11:44:57.453668 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.453668 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.453668 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.453668
[ReorderMembersFix] 2025-10-18T11:44:57.453852 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.453852 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.453852 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.453852
[ReorderMembersFix] 2025-10-18T11:44:57.454180 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.454180 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454180 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.454180
[ReorderMembersFix] 2025-10-18T11:44:57.454313 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.454313 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454313 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.454313
[ReorderMembersFix] 2025-10-18T11:44:57.454443 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.454443 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454443 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.454443
[ReorderMembersFix] 2025-10-18T11:44:57.454562 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.454562 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454562 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.454562
[ReorderMembersFix] 2025-10-18T11:44:57.454686 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.454686 ConflictingEditException: {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"} conflicts with {"offset":10022,"length":335,"replacement":"  static const _flagName = 'watch';\n\n  ///\n  WatchFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'w';\n\n  @override\n  String description() => '''\n      Experimental\n      Places the compiler into increment compilation mode. \n     dcli will watch for changes in the script and project automatically re-compiling.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454686 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.454686
[ReorderMembersFix] 2025-10-18T11:44:57.454821 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.454821 ConflictingEditException: {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"} conflicts with {"offset":446,"length":7901,"replacement":"  static const _commandName = 'compile';\n\n  final _compileFlags = [\n    NoWarmupFlag(),\n    InstallFlag(),\n    OverWriteFlag(),\n    PackageFlag(),\n    //WatchFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CompileCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    const exitCode = 0;\n\n    var scriptIndex = 0;\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        scriptIndex++;\n        final flag = flagSet.findFlag(subargument, _compileFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      break;\n    }\n\n    final scriptList = subarguments.sublist(scriptIndex);\n\n    if (flagSet.isSet(PackageFlag())) {\n      await _compilePackage(scriptList);\n    } else {\n      await compileScripts(scriptList);\n    }\n\n    return exitCode;\n  }\n\n  ///\n  Future<int> compileScript(String scriptPath) async {\n    var exitCode = 0;\n\n    print('');\n    print(orange('Compiling $scriptPath...'));\n    print('');\n\n    RunCommand.validateScriptPath(scriptPath);\n    final script = DartScript.fromFile(scriptPath);\n\n    final preparationAllowed = !Shell.current.isSudo;\n\n    if (!preparationAllowed) {\n      /// we are running sudo, so we can't init a script\n      /// as we will end up with root permissions everywhere.\n      if (!script.isReadyToRun) {\n        printerr(\n          red(\n            'The script is not ready to run, so cannot be run from sudo. '\n            'Run dcli warmup $scriptPath',\n          ),\n        );\n        dcliExit(1);\n      }\n    }\n\n    try {\n      // by default we warmup the project unless the -np flag is passed.\n      // however if the project isn't i a runnable state then we\n      // force a build.\n      final buildRequired =\n          !flagSet.isSet(NoWarmupFlag()) || !script.isReadyToRun;\n\n      print('path: ${script.pathToScript}');\n      final project = DartProject.fromPath(script.pathToScriptDirectory);\n\n      if (buildRequired) {\n        await project.warmup();\n      }\n\n      var install = flagSet.isSet(InstallFlag());\n      var overwrite = flagSet.isSet(OverWriteFlag());\n\n      /// if an exe was produced and the --install flag was set.\n      /// If no exe then the compile failed.\n      if (install && script.isInstalled) {\n        if (!overwrite) {\n          overwrite = confirm('Overwrite the existing exe?');\n          if (!overwrite) {\n            install = false;\n\n            print(\n              red(\n                'The target file ${script.pathToInstalledExe} already exists. '\n                'Use the --overwrite flag to overwrite it.',\n              ),\n            );\n          }\n        }\n      }\n\n      script.compile(install: install, overwrite: overwrite);\n    } on RunException catch (e) {\n      exitCode = e.exitCode ?? -1;\n    }\n    return exitCode;\n  }\n\n  @override\n  String description({bool extended = false}) => '''\nCompiles the given list of scripts using dart's native compiler or a a\nglobally activated package.\n   Only required if you want super fast execution.\n   If no scripts are passed then all scripts in the current directory are compiled.''';\n\n  @override\n  String usage() {\n    const description = '''\ncompile [--nowarmup] [--install] [--overwrite] [<script path.dart>, <script path.dart>,...] | --package <globally activate package name>''';\n\n    return description;\n  }\n\n  @override\n  List<String> completion(String word) =>\n      completionExpandScripts(word, extension: '.dart');\n\n  @override\n  List<Flag> flags() => _compileFlags;\n\n  Future<void> compileScripts(List<String> scriptList) async {\n    var scriptList0 = scriptList;\n    if (scriptList0.isEmpty) {\n      scriptList0 = find('*.dart', recursive: false).toList();\n    }\n\n    if (scriptList0.isEmpty) {\n      throw InvalidCommandArgumentException('There are no scripts to compile.');\n    } else {\n      // if (flagSet.isSet(WatchFlag())) {\n      //   if (scriptList.length != 1) {\n      //     throw InvalidArguments('You may only watch a single script');\n      //   }\n      //   IncrementalCompiler(scriptList.first).watch();\n      // } else {\n      for (final scriptPath in scriptList0) {\n        exitCode = await compileScript(scriptPath);\n        if (exitCode != 0) {\n          break;\n        }\n        //}\n      }\n    }\n  }\n\n  /// Compiles a globally activted taking the package name\n  /// and optionally the version from [scriptList].\n  Future<void> _compilePackage(List<String> scriptList) async {\n    // we are compiling a globally activated package\n    // we must be passed the package name and optionally a version\n    if (scriptList.length != 1 && scriptList.length != 2) {\n      throw InvalidCommandArgumentException(\n          'The \"--package\" flag must be followed by '\n          'the name of the package and optionally a version');\n    }\n\n    final packageName = scriptList[0];\n    String? versionString;\n    if (scriptList.length == 2) {\n      versionString = scriptList[1];\n    }\n\n    await compilePackage(packageName, version: versionString);\n  }\n\n  /// Compiles a globally activted\n  Future<void> compilePackage(String packageName, {String? version}) async {\n    if (packageName.contains(separator)) {\n      throw InvalidCommandArgumentException(\n          'The package must not include a path.');\n    }\n    if (!PubCache().isInstalled(packageName) &&\n        !PubCache().isGloballyActivated(packageName)) {\n      throw InvalidCommandArgumentException('''\nTo compile the package $packageName it must first be installed.\nRun:\n  dart pub global activate $packageName\n  ''');\n    }\n\n    if (!exists(Settings().pathToDCli)) {\n      throw DCliNotInstalledException(\n          \"You must first install DCli by running 'dcli install'\");\n    }\n\n    late final String pathToPackage;\n\n    /// Find all the the exectuables the package exposes\n    if (version == null) {\n      late final version = PubCache().findPrimaryVersion(packageName);\n      pathToPackage =\n          PubCache().pathToPackage(packageName, version?.toString() ?? '');\n    } else {\n      final pathTo = PubCache().findVersion(packageName, version);\n      if (pathTo == null) {\n        throw InvalidCommandArgumentException(\n            'The requested version $version does not exist');\n      }\n      pathToPackage = pathTo;\n    }\n\n    await core.withTempDirAsync((pathToTempPackage) async {\n      /// we copy the package to a temp area so we don't\n      /// contaminate the cache. Don't know if this is actually\n      /// a problem..\n      print('Creating temp copy of package $packageName ${version ?? \"\"}');\n      copyTree(pathToPackage, pathToTempPackage,\n\n          /// dart allows a user to publish the override even though it should\n          /// never be published and breaks build from cache if it exists.\n          filter: (file) => basename(file) != 'pubspec_overrides.yaml');\n      await DartProject.fromPath(pathToTempPackage).warmup();\n\n      final pubspec = PubSpec.load(directory: pathToTempPackage);\n\n      for (final exe in pubspec.executables.list) {\n        final pathToOutput =\n            join(pathToTempPackage, dirname(exe.scriptPath), exe.name);\n        print(green('Compiling ${exe.name}...'));\n        DartSdk().runDartCompiler(\n          DartScript.fromFile(join(pathToTempPackage, exe.scriptPath)),\n          pathToExe: pathToOutput,\n          progress: Progress(print, stderr: print),\n          workingDirectory: pathToTempPackage,\n        );\n        move(pathToOutput, Settings().pathToDCliBin, overwrite: true);\n      }\n    });\n  }"}
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.454821 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.454821
[ReorderMembersFix] 2025-10-18T11:44:57.455054 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.455054 ConflictingEditException: {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"} conflicts with {"offset":8389,"length":351,"replacement":"  static const _flagName = 'nowarmup';\n\n  ///\n  NoWarmupFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nw';\n\n  @override\n  String description() => '''\n      Stops the compile from running 'dcli warmup' before compiling.\n      Use the nowarmup option to speed up compilation when you know your project structure is up to date.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.455054 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.455054
[ReorderMembersFix] 2025-10-18T11:44:57.455169 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.455169 ConflictingEditException: {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"} conflicts with {"offset":8781,"length":261,"replacement":"  static const _flagName = 'install';\n\n  ///\n  InstallFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'i';\n\n  @override\n  String description() => '''\n      Installs the compiled script into your path '''\n      '${Settings().pathToDCliBin}';"}
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.455169 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.455169
[ReorderMembersFix] 2025-10-18T11:44:57.456441 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.456441 ConflictingEditException: {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"} conflicts with {"offset":9085,"length":292,"replacement":"  static const _flagName = 'overwrite';\n\n  ///\n  OverWriteFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'o';\n\n  @override\n  String description() => '''\n      If the installed executable already exists in '\n      '${Settings().pathToDCliBin} then it will overwritten.''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.456441 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.456441
[ReorderMembersFix] 2025-10-18T11:44:57.456632 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/compile.dart:
[ReorderMembersFix] 2025-10-18T11:44:57.456632 ConflictingEditException: {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"} conflicts with {"offset":9418,"length":474,"replacement":"  static const _flagName = 'package';\n\n  ///\n  PackageFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'p';\n\n  @override\n  String description() => '''\n      Compile a globally installed dart package and adds it to your path '${Settings().pathToDCliBin}'.\n      If a version isn't passed then we compile the most recent stable version.\n      Run 'dart pub global activate <package name>' \n      Then 'dcli compile --package <package name> [<version>]' ''';"}
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:44:57.456632 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:44:57.456632
[ReorderMembersFix] 2025-10-18T11:45:00.094997 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/create.dart:
[ReorderMembersFix] 2025-10-18T11:45:00.094997 ConflictingEditException: {"offset":5818,"length":243,"replacement":"  static const _flagName = 'foreground';\n\n  ///\n  ForegroundFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'fg';\n\n  @override\n  String description() =>\n      '''Stops the create from running pub get in the background.''';"} conflicts with {"offset":5818,"length":243,"replacement":"  static const _flagName = 'foreground';\n\n  ///\n  ForegroundFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'fg';\n\n  @override\n  String description() =>\n      '''Stops the create from running pub get in the background.''';"}
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:00.094997 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:00.094997
[ReorderMembersFix] 2025-10-18T11:45:00.095907 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/create.dart:
[ReorderMembersFix] 2025-10-18T11:45:00.095907 ConflictingEditException: {"offset":460,"length":5314,"replacement":"  static const _commandName = 'create';\n\n  final _createFlags = [\n    TemplateFlag(),\n    TemplateListFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CreateCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n    TemplateFlag? templateFlag;\n\n    if (Shell.current.isSudo) {\n      printerr('You cannot create a script or a project as sudo.');\n      return 1;\n    }\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _createFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          if (flag is TemplateFlag) {\n            templateFlag = flag;\n          }\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      scriptIndex = i;\n\n      break;\n    }\n\n    if (flagSet.isSet(TemplateListFlag())) {\n      _printTemplates();\n      return 0;\n    }\n\n    final target = _retrieveTarget(subarguments.sublist(scriptIndex));\n    final templateName = templateFlag != null\n        ? templateFlag.option\n        : TemplateFlag.defaultTemplateName;\n\n    try {\n      if (target.endsWith('.dart')) {\n        /// create a script\n        final project = DartProject.findProject(dirname(target));\n\n        if (project == null) {\n          printerr(red('The current directory is not a Dart Project. '\n              'Use dcli create <projectname> to create a project.'));\n          return 1;\n        }\n\n        DartScript.createScript(\n            project: project, scriptName: target, templateName: templateName);\n      } else {\n        /// create a project\n        DartProject.create(pathTo: target, templateName: templateName);\n      }\n    } on TemplateNotFoundException catch (e) {\n      printerr(red(e.message));\n      print('Install DCli and try again.');\n      print(blue(Shell.current.installInstructions));\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /// Extracts the target from the args. This will either be a\n  /// dart file or a directory if the user wants to create an\n  /// entire project.\n  /// `<script.dart>` | `<project path>`\n  String _retrieveTarget(List<String> arguments) {\n    if (arguments.length != 1) {\n      throw InvalidCommandArgumentException(\n        'The create command takes one argument. '\n        'Found: ${arguments.join(',')}',\n      );\n    }\n    final target = arguments[0];\n    if (extension(target) == '.dart') {\n      /// create a single dart script within an existing project\n      if (exists(target)) {\n        throw InvalidCommandArgumentException(\n          'The script ${truepath(target)} already exists.',\n        );\n      }\n\n      /// check the script directory exists\n      if (!exists(dirname(target))) {\n        throw InvalidCommandArgumentException('The script directory '\n            '${truepath(dirname(target))} must already exists.');\n      }\n    } else {\n      /// Create a new dart project\n      /// check the project directory doesn't exists\n      if (exists(target)) {\n        throw InvalidCommandArgumentException('The project directory '\n            '${truepath(target)} already exists.');\n      }\n    }\n\n    return target;\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      'Creates a script or project from a template.';\n\n  @override\n  String usage() => 'create --list | '\n      'create [--template=<template name>] '\n      '<script path.dart> | <project path>';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _createFlags;\n\n  /// print a list of project and script templates\n  void _printTemplates() {\n    print('');\n    print(green('Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProject,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateProjectCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n\n    print('');\n    print(green('Custom Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProjectCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n\n    print('');\n    print(green('Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScript,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateScriptCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n    print('');\n    print(green('Custom Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScriptCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n    print('');\n  }"} conflicts with {"offset":460,"length":5314,"replacement":"  static const _commandName = 'create';\n\n  final _createFlags = [\n    TemplateFlag(),\n    TemplateListFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CreateCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n    TemplateFlag? templateFlag;\n\n    if (Shell.current.isSudo) {\n      printerr('You cannot create a script or a project as sudo.');\n      return 1;\n    }\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _createFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          if (flag is TemplateFlag) {\n            templateFlag = flag;\n          }\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      scriptIndex = i;\n\n      break;\n    }\n\n    if (flagSet.isSet(TemplateListFlag())) {\n      _printTemplates();\n      return 0;\n    }\n\n    final target = _retrieveTarget(subarguments.sublist(scriptIndex));\n    final templateName = templateFlag != null\n        ? templateFlag.option\n        : TemplateFlag.defaultTemplateName;\n\n    try {\n      if (target.endsWith('.dart')) {\n        /// create a script\n        final project = DartProject.findProject(dirname(target));\n\n        if (project == null) {\n          printerr(red('The current directory is not a Dart Project. '\n              'Use dcli create <projectname> to create a project.'));\n          return 1;\n        }\n\n        DartScript.createScript(\n            project: project, scriptName: target, templateName: templateName);\n      } else {\n        /// create a project\n        DartProject.create(pathTo: target, templateName: templateName);\n      }\n    } on TemplateNotFoundException catch (e) {\n      printerr(red(e.message));\n      print('Install DCli and try again.');\n      print(blue(Shell.current.installInstructions));\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /// Extracts the target from the args. This will either be a\n  /// dart file or a directory if the user wants to create an\n  /// entire project.\n  /// `<script.dart>` | `<project path>`\n  String _retrieveTarget(List<String> arguments) {\n    if (arguments.length != 1) {\n      throw InvalidCommandArgumentException(\n        'The create command takes one argument. '\n        'Found: ${arguments.join(',')}',\n      );\n    }\n    final target = arguments[0];\n    if (extension(target) == '.dart') {\n      /// create a single dart script within an existing project\n      if (exists(target)) {\n        throw InvalidCommandArgumentException(\n          'The script ${truepath(target)} already exists.',\n        );\n      }\n\n      /// check the script directory exists\n      if (!exists(dirname(target))) {\n        throw InvalidCommandArgumentException('The script directory '\n            '${truepath(dirname(target))} must already exists.');\n      }\n    } else {\n      /// Create a new dart project\n      /// check the project directory doesn't exists\n      if (exists(target)) {\n        throw InvalidCommandArgumentException('The project directory '\n            '${truepath(target)} already exists.');\n      }\n    }\n\n    return target;\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      'Creates a script or project from a template.';\n\n  @override\n  String usage() => 'create --list | '\n      'create [--template=<template name>] '\n      '<script path.dart> | <project path>';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _createFlags;\n\n  /// print a list of project and script templates\n  void _printTemplates() {\n    print('');\n    print(green('Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProject,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateProjectCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n\n    print('');\n    print(green('Custom Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProjectCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n\n    print('');\n    print(green('Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScript,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateScriptCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n    print('');\n    print(green('Custom Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScriptCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n    print('');\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:00.095907 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:00.095907
[ReorderMembersFix] 2025-10-18T11:45:00.408756 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/create.dart:
[ReorderMembersFix] 2025-10-18T11:45:00.408756 ConflictingEditException: {"offset":5818,"length":243,"replacement":"  static const _flagName = 'foreground';\n\n  ///\n  ForegroundFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'fg';\n\n  @override\n  String description() =>\n      '''Stops the create from running pub get in the background.''';"} conflicts with {"offset":5818,"length":243,"replacement":"  static const _flagName = 'foreground';\n\n  ///\n  ForegroundFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'fg';\n\n  @override\n  String description() =>\n      '''Stops the create from running pub get in the background.''';"}
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:00.408756 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:00.408756
[ReorderMembersFix] 2025-10-18T11:45:00.409008 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/create.dart:
[ReorderMembersFix] 2025-10-18T11:45:00.409008 ConflictingEditException: {"offset":460,"length":5314,"replacement":"  static const _commandName = 'create';\n\n  final _createFlags = [\n    TemplateFlag(),\n    TemplateListFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CreateCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n    TemplateFlag? templateFlag;\n\n    if (Shell.current.isSudo) {\n      printerr('You cannot create a script or a project as sudo.');\n      return 1;\n    }\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _createFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          if (flag is TemplateFlag) {\n            templateFlag = flag;\n          }\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      scriptIndex = i;\n\n      break;\n    }\n\n    if (flagSet.isSet(TemplateListFlag())) {\n      _printTemplates();\n      return 0;\n    }\n\n    final target = _retrieveTarget(subarguments.sublist(scriptIndex));\n    final templateName = templateFlag != null\n        ? templateFlag.option\n        : TemplateFlag.defaultTemplateName;\n\n    try {\n      if (target.endsWith('.dart')) {\n        /// create a script\n        final project = DartProject.findProject(dirname(target));\n\n        if (project == null) {\n          printerr(red('The current directory is not a Dart Project. '\n              'Use dcli create <projectname> to create a project.'));\n          return 1;\n        }\n\n        DartScript.createScript(\n            project: project, scriptName: target, templateName: templateName);\n      } else {\n        /// create a project\n        DartProject.create(pathTo: target, templateName: templateName);\n      }\n    } on TemplateNotFoundException catch (e) {\n      printerr(red(e.message));\n      print('Install DCli and try again.');\n      print(blue(Shell.current.installInstructions));\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /// Extracts the target from the args. This will either be a\n  /// dart file or a directory if the user wants to create an\n  /// entire project.\n  /// `<script.dart>` | `<project path>`\n  String _retrieveTarget(List<String> arguments) {\n    if (arguments.length != 1) {\n      throw InvalidCommandArgumentException(\n        'The create command takes one argument. '\n        'Found: ${arguments.join(',')}',\n      );\n    }\n    final target = arguments[0];\n    if (extension(target) == '.dart') {\n      /// create a single dart script within an existing project\n      if (exists(target)) {\n        throw InvalidCommandArgumentException(\n          'The script ${truepath(target)} already exists.',\n        );\n      }\n\n      /// check the script directory exists\n      if (!exists(dirname(target))) {\n        throw InvalidCommandArgumentException('The script directory '\n            '${truepath(dirname(target))} must already exists.');\n      }\n    } else {\n      /// Create a new dart project\n      /// check the project directory doesn't exists\n      if (exists(target)) {\n        throw InvalidCommandArgumentException('The project directory '\n            '${truepath(target)} already exists.');\n      }\n    }\n\n    return target;\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      'Creates a script or project from a template.';\n\n  @override\n  String usage() => 'create --list | '\n      'create [--template=<template name>] '\n      '<script path.dart> | <project path>';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _createFlags;\n\n  /// print a list of project and script templates\n  void _printTemplates() {\n    print('');\n    print(green('Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProject,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateProjectCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n\n    print('');\n    print(green('Custom Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProjectCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n\n    print('');\n    print(green('Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScript,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateScriptCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n    print('');\n    print(green('Custom Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScriptCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n    print('');\n  }"} conflicts with {"offset":460,"length":5314,"replacement":"  static const _commandName = 'create';\n\n  final _createFlags = [\n    TemplateFlag(),\n    TemplateListFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CreateCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n    TemplateFlag? templateFlag;\n\n    if (Shell.current.isSudo) {\n      printerr('You cannot create a script or a project as sudo.');\n      return 1;\n    }\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _createFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          if (flag is TemplateFlag) {\n            templateFlag = flag;\n          }\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      scriptIndex = i;\n\n      break;\n    }\n\n    if (flagSet.isSet(TemplateListFlag())) {\n      _printTemplates();\n      return 0;\n    }\n\n    final target = _retrieveTarget(subarguments.sublist(scriptIndex));\n    final templateName = templateFlag != null\n        ? templateFlag.option\n        : TemplateFlag.defaultTemplateName;\n\n    try {\n      if (target.endsWith('.dart')) {\n        /// create a script\n        final project = DartProject.findProject(dirname(target));\n\n        if (project == null) {\n          printerr(red('The current directory is not a Dart Project. '\n              'Use dcli create <projectname> to create a project.'));\n          return 1;\n        }\n\n        DartScript.createScript(\n            project: project, scriptName: target, templateName: templateName);\n      } else {\n        /// create a project\n        DartProject.create(pathTo: target, templateName: templateName);\n      }\n    } on TemplateNotFoundException catch (e) {\n      printerr(red(e.message));\n      print('Install DCli and try again.');\n      print(blue(Shell.current.installInstructions));\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /// Extracts the target from the args. This will either be a\n  /// dart file or a directory if the user wants to create an\n  /// entire project.\n  /// `<script.dart>` | `<project path>`\n  String _retrieveTarget(List<String> arguments) {\n    if (arguments.length != 1) {\n      throw InvalidCommandArgumentException(\n        'The create command takes one argument. '\n        'Found: ${arguments.join(',')}',\n      );\n    }\n    final target = arguments[0];\n    if (extension(target) == '.dart') {\n      /// create a single dart script within an existing project\n      if (exists(target)) {\n        throw InvalidCommandArgumentException(\n          'The script ${truepath(target)} already exists.',\n        );\n      }\n\n      /// check the script directory exists\n      if (!exists(dirname(target))) {\n        throw InvalidCommandArgumentException('The script directory '\n            '${truepath(dirname(target))} must already exists.');\n      }\n    } else {\n      /// Create a new dart project\n      /// check the project directory doesn't exists\n      if (exists(target)) {\n        throw InvalidCommandArgumentException('The project directory '\n            '${truepath(target)} already exists.');\n      }\n    }\n\n    return target;\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      'Creates a script or project from a template.';\n\n  @override\n  String usage() => 'create --list | '\n      'create [--template=<template name>] '\n      '<script path.dart> | <project path>';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _createFlags;\n\n  /// print a list of project and script templates\n  void _printTemplates() {\n    print('');\n    print(green('Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProject,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateProjectCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n\n    print('');\n    print(green('Custom Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProjectCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n\n    print('');\n    print(green('Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScript,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateScriptCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n    print('');\n    print(green('Custom Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScriptCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n    print('');\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:00.409008 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:00.409008
[ReorderMembersFix] 2025-10-18T11:45:01.103024 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/create.dart:
[ReorderMembersFix] 2025-10-18T11:45:01.103024 ConflictingEditException: {"offset":5818,"length":243,"replacement":"  static const _flagName = 'foreground';\n\n  ///\n  ForegroundFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'fg';\n\n  @override\n  String description() =>\n      '''Stops the create from running pub get in the background.''';"} conflicts with {"offset":5818,"length":243,"replacement":"  static const _flagName = 'foreground';\n\n  ///\n  ForegroundFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'fg';\n\n  @override\n  String description() =>\n      '''Stops the create from running pub get in the background.''';"}
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:01.103024 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:01.103024
[ReorderMembersFix] 2025-10-18T11:45:01.103778 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/create.dart:
[ReorderMembersFix] 2025-10-18T11:45:01.103778 ConflictingEditException: {"offset":460,"length":5314,"replacement":"  static const _commandName = 'create';\n\n  final _createFlags = [\n    TemplateFlag(),\n    TemplateListFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CreateCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n    TemplateFlag? templateFlag;\n\n    if (Shell.current.isSudo) {\n      printerr('You cannot create a script or a project as sudo.');\n      return 1;\n    }\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _createFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          if (flag is TemplateFlag) {\n            templateFlag = flag;\n          }\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      scriptIndex = i;\n\n      break;\n    }\n\n    if (flagSet.isSet(TemplateListFlag())) {\n      _printTemplates();\n      return 0;\n    }\n\n    final target = _retrieveTarget(subarguments.sublist(scriptIndex));\n    final templateName = templateFlag != null\n        ? templateFlag.option\n        : TemplateFlag.defaultTemplateName;\n\n    try {\n      if (target.endsWith('.dart')) {\n        /// create a script\n        final project = DartProject.findProject(dirname(target));\n\n        if (project == null) {\n          printerr(red('The current directory is not a Dart Project. '\n              'Use dcli create <projectname> to create a project.'));\n          return 1;\n        }\n\n        DartScript.createScript(\n            project: project, scriptName: target, templateName: templateName);\n      } else {\n        /// create a project\n        DartProject.create(pathTo: target, templateName: templateName);\n      }\n    } on TemplateNotFoundException catch (e) {\n      printerr(red(e.message));\n      print('Install DCli and try again.');\n      print(blue(Shell.current.installInstructions));\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /// Extracts the target from the args. This will either be a\n  /// dart file or a directory if the user wants to create an\n  /// entire project.\n  /// `<script.dart>` | `<project path>`\n  String _retrieveTarget(List<String> arguments) {\n    if (arguments.length != 1) {\n      throw InvalidCommandArgumentException(\n        'The create command takes one argument. '\n        'Found: ${arguments.join(',')}',\n      );\n    }\n    final target = arguments[0];\n    if (extension(target) == '.dart') {\n      /// create a single dart script within an existing project\n      if (exists(target)) {\n        throw InvalidCommandArgumentException(\n          'The script ${truepath(target)} already exists.',\n        );\n      }\n\n      /// check the script directory exists\n      if (!exists(dirname(target))) {\n        throw InvalidCommandArgumentException('The script directory '\n            '${truepath(dirname(target))} must already exists.');\n      }\n    } else {\n      /// Create a new dart project\n      /// check the project directory doesn't exists\n      if (exists(target)) {\n        throw InvalidCommandArgumentException('The project directory '\n            '${truepath(target)} already exists.');\n      }\n    }\n\n    return target;\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      'Creates a script or project from a template.';\n\n  @override\n  String usage() => 'create --list | '\n      'create [--template=<template name>] '\n      '<script path.dart> | <project path>';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _createFlags;\n\n  /// print a list of project and script templates\n  void _printTemplates() {\n    print('');\n    print(green('Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProject,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateProjectCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n\n    print('');\n    print(green('Custom Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProjectCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n\n    print('');\n    print(green('Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScript,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateScriptCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n    print('');\n    print(green('Custom Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScriptCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n    print('');\n  }"} conflicts with {"offset":460,"length":5314,"replacement":"  static const _commandName = 'create';\n\n  final _createFlags = [\n    TemplateFlag(),\n    TemplateListFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  var flagSet = Flags();\n\n  ///\n  CreateCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n    TemplateFlag? templateFlag;\n\n    if (Shell.current.isSudo) {\n      printerr('You cannot create a script or a project as sudo.');\n      return 1;\n    }\n\n    // check for any flags\n    for (var i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _createFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          if (flag is TemplateFlag) {\n            templateFlag = flag;\n          }\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n      scriptIndex = i;\n\n      break;\n    }\n\n    if (flagSet.isSet(TemplateListFlag())) {\n      _printTemplates();\n      return 0;\n    }\n\n    final target = _retrieveTarget(subarguments.sublist(scriptIndex));\n    final templateName = templateFlag != null\n        ? templateFlag.option\n        : TemplateFlag.defaultTemplateName;\n\n    try {\n      if (target.endsWith('.dart')) {\n        /// create a script\n        final project = DartProject.findProject(dirname(target));\n\n        if (project == null) {\n          printerr(red('The current directory is not a Dart Project. '\n              'Use dcli create <projectname> to create a project.'));\n          return 1;\n        }\n\n        DartScript.createScript(\n            project: project, scriptName: target, templateName: templateName);\n      } else {\n        /// create a project\n        DartProject.create(pathTo: target, templateName: templateName);\n      }\n    } on TemplateNotFoundException catch (e) {\n      printerr(red(e.message));\n      print('Install DCli and try again.');\n      print(blue(Shell.current.installInstructions));\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /// Extracts the target from the args. This will either be a\n  /// dart file or a directory if the user wants to create an\n  /// entire project.\n  /// `<script.dart>` | `<project path>`\n  String _retrieveTarget(List<String> arguments) {\n    if (arguments.length != 1) {\n      throw InvalidCommandArgumentException(\n        'The create command takes one argument. '\n        'Found: ${arguments.join(',')}',\n      );\n    }\n    final target = arguments[0];\n    if (extension(target) == '.dart') {\n      /// create a single dart script within an existing project\n      if (exists(target)) {\n        throw InvalidCommandArgumentException(\n          'The script ${truepath(target)} already exists.',\n        );\n      }\n\n      /// check the script directory exists\n      if (!exists(dirname(target))) {\n        throw InvalidCommandArgumentException('The script directory '\n            '${truepath(dirname(target))} must already exists.');\n      }\n    } else {\n      /// Create a new dart project\n      /// check the project directory doesn't exists\n      if (exists(target)) {\n        throw InvalidCommandArgumentException('The project directory '\n            '${truepath(target)} already exists.');\n      }\n    }\n\n    return target;\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      'Creates a script or project from a template.';\n\n  @override\n  String usage() => 'create --list | '\n      'create [--template=<template name>] '\n      '<script path.dart> | <project path>';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _createFlags;\n\n  /// print a list of project and script templates\n  void _printTemplates() {\n    print('');\n    print(green('Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProject,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateProjectCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n\n    print('');\n    print(green('Custom Project templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateProjectCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n\n    print('');\n    print(green('Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScript,\n            recursive: false)\n        .forEach((templateDir) {\n      if (templateDir != Settings().pathToTemplateScriptCustom) {\n        print('  ${basename(templateDir)}');\n      }\n    });\n    print('');\n    print(green('Custom Script templates'));\n    find('*',\n            types: [Find.directory],\n            workingDirectory: Settings().pathToTemplateScriptCustom,\n            recursive: false)\n        .forEach((templateDir) {\n      print('  ${basename(templateDir)}');\n    });\n    print('');\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:01.103778 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:01.103778
[ReorderMembersFix] 2025-10-18T11:45:03.733498 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/doctor.dart:
[ReorderMembersFix] 2025-10-18T11:45:03.733498 ConflictingEditException: {"offset":6244,"length":462,"replacement":"  String? user;\n\n  String? group;\n\n  _Owner(String path) {\n    if (Settings().isWindows) {\n      user = 'Unknown';\n      group = 'Unknown';\n    } else {\n      final lsLine = 'ls -alFd $path'.firstLine;\n\n      if (lsLine == null) {\n        throw DCliException('No file/directory matched ${truepath(path)}');\n      }\n\n      final parts = lsLine.split(' ');\n      user = parts[2];\n      group = parts[3];\n    }\n  }\n\n  @override\n  String toString() => '$user:$group';"} conflicts with {"offset":6244,"length":462,"replacement":"  String? user;\n\n  String? group;\n\n  _Owner(String path) {\n    if (Settings().isWindows) {\n      user = 'Unknown';\n      group = 'Unknown';\n    } else {\n      final lsLine = 'ls -alFd $path'.firstLine;\n\n      if (lsLine == null) {\n        throw DCliException('No file/directory matched ${truepath(path)}');\n      }\n\n      final parts = lsLine.split(' ');\n      user = parts[2];\n      group = parts[3];\n    }\n  }\n\n  @override\n  String toString() => '$user:$group';"}
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:03.733498 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:03.733498
[ReorderMembersFix] 2025-10-18T11:45:03.733826 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/doctor.dart:
[ReorderMembersFix] 2025-10-18T11:45:03.733826 ConflictingEditException: {"offset":410,"length":5815,"replacement":"  static const _commandName = 'doctor';\n\n  ///\n  DoctorCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var showScriptDetails = false;\n\n    late DartScript script;\n    if (subarguments.length == 1) {\n      showScriptDetails = true;\n      final scriptPath = subarguments[0];\n      RunCommand.validateScriptPath(scriptPath);\n      script = DartScript.fromFile(scriptPath);\n    }\n    if (subarguments.length > 1) {\n      throw InvalidCommandArgumentException(\n        \"'dcli doctor' takes zero or one arguments. Found $subarguments\",\n      );\n    }\n\n    _colprint(['DCli version', Settings().version]);\n    print('');\n\n    _printPlatform();\n    print('');\n\n    _printExePaths();\n    print('');\n\n    _printPubCache();\n    print('');\n\n    _printPackageConfig();\n    print('');\n\n    _printPATH();\n    print('');\n\n    _printShell();\n    print('');\n\n    _printDartLocations();\n    print('');\n\n    _printPermissions();\n    print('');\n\n    if (showScriptDetails) {\n      script.doctor;\n    }\n    return 0;\n  }\n\n  void _printDartLocations() {\n    print('dart location(s)');\n    which('dart').paths.forEach((line) => _colprint(['', line]));\n  }\n\n  void _printPermissions() {\n    print('permissions');\n    _showPermissions('HOME', HOME);\n    _showPermissions('.dcli', Settings().pathToDCli);\n\n    _showPermissions('project template', Settings().pathToTemplateProject);\n    _showPermissions('script template', Settings().pathToTemplateScript);\n\n    _showPermissions('pub cache', PubCache().pathTo);\n  }\n\n  void _printShell() {\n    print('shell settings');\n    _colprint([r'$SHELL', env['SHELL'] ?? '']);\n\n    final shell = Shell.current;\n    _colprint(['detected', shell.name]);\n\n    if (shell.hasStartScript) {\n      final startScriptPath = shell.pathToStartScript;\n      _colprint(['start script', privatePath(startScriptPath ?? 'not found')]);\n    } else {\n      _colprint(['start sript', 'not supported by shell']);\n    }\n  }\n\n  void _printPATH() {\n    print('PATH');\n    for (final path in PATH) {\n      _colprint(['', privatePath(path)]);\n    }\n  }\n\n  void _printPackageConfig() {\n    _colprint([\n      'package config',\n      privatePath(Platform.packageConfig ?? 'not passed')\n    ]);\n  }\n\n  void _printPubCache() {\n    final pathToPubCache = PubCache().pathTo;\n    _colprint(['pub cache', privatePath(pathToPubCache)]);\n\n    _colprint(\n      ['PUB_CACHE Env', '${envs.containsKey(PubCache.envVarPubCache)}'],\n    );\n  }\n\n  void _printExePaths() {\n    final pathToDCli = DCliPaths().pathToDCli;\n    _colprint([\n      'dcli path',\n      if (pathToDCli == null) 'Not found' else privatePath(pathToDCli)\n    ]);\n    _colprint(\n        ['dart exe path', privatePath(DartSdk().pathToDartExe ?? 'not found')]);\n\n    final dartPath = which(DartSdk.dartExeName).path;\n    _colprint([\n      'dart path',\n      privatePath(DartSdk().pathToDartExe ?? 'not found'),\n      'which: ${privatePath(dartPath ?? 'not found')}'\n    ]);\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['compiler', \"using 'dart compile exe'\"]);\n    } else {\n      _colprint(['compiler', \"using 'dart2native'\"]);\n      final dart2NativePath = which(DartSdk.dart2NativeExeName).path;\n\n      if (dart2NativePath != null) {\n        _colprint([\n          'dart2Native path',\n          privatePath(DartSdk().pathToDartToNativeExe ?? 'not found'),\n          'which: ${privatePath(dart2NativePath)}'\n        ]);\n      } else {\n        _colprint([\n          'dart2Native path',\n          'Not Found',\n        ]);\n      }\n    }\n    print('');\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['pub', \"using 'dart pub'\"]);\n    } else {\n      final pubPath = which(DartSdk.pubExeName).path;\n\n      if (pubPath != null) {\n        _colprint([\n          'pub path',\n          privatePath(DartSdk().pathToPubExe ?? 'not found'),\n          'which: ${privatePath(pubPath)}'\n        ]);\n      } else {\n        _colprint([\n          'pub path',\n          'not Found',\n        ]);\n      }\n      _colprint(['Pub cache', privatePath(PubCache().pathTo)]);\n    }\n  }\n\n  void _printPlatform() {\n    _colprint(['os', Platform.operatingSystem]);\n    print(\n      Format().row(\n        ['os version', Platform.operatingSystemVersion],\n        widths: [17, -1],\n      ),\n    );\n    _colprint(['path separator', Platform.pathSeparator]);\n    print('');\n    _colprint(['dart version', DartSdk().version]);\n  }\n\n  void _colprint(List<String?> cols) {\n    //cols[0] = green(cols[0]);\n    print(Format().row(cols, widths: [17, 55], delimiter: ' '));\n  }\n\n  @override\n  String description({bool extended = false}) => \"\"\"\nRunning 'dcli doctor' provides diagnostic information on your install \n   and optionally a specific script.\"\"\";\n\n  @override\n  String usage() => 'doctor [<script path.dart>]';\n\n  @override\n  List<String> completion(String word) => completionExpandScripts(word);\n\n  void _showPermissions(String label, String path) {\n    var finallabel = label;\n    if (exists(path)) {\n      final fstat = stat(path);\n\n      final owner = _Owner(path);\n\n      finallabel = label.padRight(20);\n\n      final username = Shell.current.loggedInUser;\n      if (username != null) {\n        print(\n          Format().row(\n            [\n              finallabel,\n              fstat.modeString(),\n              '<user>:${owner.group == owner.user ? '<user>' : owner.group}',\n              '${privatePath(path)} '\n            ],\n            widths: [17, 9, 16, -1],\n            alignments: [\n              TableAlignment.left,\n              TableAlignment.left,\n              TableAlignment.middle,\n              TableAlignment.left\n            ],\n          ),\n        );\n      }\n    } else {\n      _colprint([finallabel, '${privatePath(path)} does not exist']);\n    }\n  }\n\n  @override\n  List<Flag> flags() => [];"} conflicts with {"offset":410,"length":5815,"replacement":"  static const _commandName = 'doctor';\n\n  ///\n  DoctorCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var showScriptDetails = false;\n\n    late DartScript script;\n    if (subarguments.length == 1) {\n      showScriptDetails = true;\n      final scriptPath = subarguments[0];\n      RunCommand.validateScriptPath(scriptPath);\n      script = DartScript.fromFile(scriptPath);\n    }\n    if (subarguments.length > 1) {\n      throw InvalidCommandArgumentException(\n        \"'dcli doctor' takes zero or one arguments. Found $subarguments\",\n      );\n    }\n\n    _colprint(['DCli version', Settings().version]);\n    print('');\n\n    _printPlatform();\n    print('');\n\n    _printExePaths();\n    print('');\n\n    _printPubCache();\n    print('');\n\n    _printPackageConfig();\n    print('');\n\n    _printPATH();\n    print('');\n\n    _printShell();\n    print('');\n\n    _printDartLocations();\n    print('');\n\n    _printPermissions();\n    print('');\n\n    if (showScriptDetails) {\n      script.doctor;\n    }\n    return 0;\n  }\n\n  void _printDartLocations() {\n    print('dart location(s)');\n    which('dart').paths.forEach((line) => _colprint(['', line]));\n  }\n\n  void _printPermissions() {\n    print('permissions');\n    _showPermissions('HOME', HOME);\n    _showPermissions('.dcli', Settings().pathToDCli);\n\n    _showPermissions('project template', Settings().pathToTemplateProject);\n    _showPermissions('script template', Settings().pathToTemplateScript);\n\n    _showPermissions('pub cache', PubCache().pathTo);\n  }\n\n  void _printShell() {\n    print('shell settings');\n    _colprint([r'$SHELL', env['SHELL'] ?? '']);\n\n    final shell = Shell.current;\n    _colprint(['detected', shell.name]);\n\n    if (shell.hasStartScript) {\n      final startScriptPath = shell.pathToStartScript;\n      _colprint(['start script', privatePath(startScriptPath ?? 'not found')]);\n    } else {\n      _colprint(['start sript', 'not supported by shell']);\n    }\n  }\n\n  void _printPATH() {\n    print('PATH');\n    for (final path in PATH) {\n      _colprint(['', privatePath(path)]);\n    }\n  }\n\n  void _printPackageConfig() {\n    _colprint([\n      'package config',\n      privatePath(Platform.packageConfig ?? 'not passed')\n    ]);\n  }\n\n  void _printPubCache() {\n    final pathToPubCache = PubCache().pathTo;\n    _colprint(['pub cache', privatePath(pathToPubCache)]);\n\n    _colprint(\n      ['PUB_CACHE Env', '${envs.containsKey(PubCache.envVarPubCache)}'],\n    );\n  }\n\n  void _printExePaths() {\n    final pathToDCli = DCliPaths().pathToDCli;\n    _colprint([\n      'dcli path',\n      if (pathToDCli == null) 'Not found' else privatePath(pathToDCli)\n    ]);\n    _colprint(\n        ['dart exe path', privatePath(DartSdk().pathToDartExe ?? 'not found')]);\n\n    final dartPath = which(DartSdk.dartExeName).path;\n    _colprint([\n      'dart path',\n      privatePath(DartSdk().pathToDartExe ?? 'not found'),\n      'which: ${privatePath(dartPath ?? 'not found')}'\n    ]);\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['compiler', \"using 'dart compile exe'\"]);\n    } else {\n      _colprint(['compiler', \"using 'dart2native'\"]);\n      final dart2NativePath = which(DartSdk.dart2NativeExeName).path;\n\n      if (dart2NativePath != null) {\n        _colprint([\n          'dart2Native path',\n          privatePath(DartSdk().pathToDartToNativeExe ?? 'not found'),\n          'which: ${privatePath(dart2NativePath)}'\n        ]);\n      } else {\n        _colprint([\n          'dart2Native path',\n          'Not Found',\n        ]);\n      }\n    }\n    print('');\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['pub', \"using 'dart pub'\"]);\n    } else {\n      final pubPath = which(DartSdk.pubExeName).path;\n\n      if (pubPath != null) {\n        _colprint([\n          'pub path',\n          privatePath(DartSdk().pathToPubExe ?? 'not found'),\n          'which: ${privatePath(pubPath)}'\n        ]);\n      } else {\n        _colprint([\n          'pub path',\n          'not Found',\n        ]);\n      }\n      _colprint(['Pub cache', privatePath(PubCache().pathTo)]);\n    }\n  }\n\n  void _printPlatform() {\n    _colprint(['os', Platform.operatingSystem]);\n    print(\n      Format().row(\n        ['os version', Platform.operatingSystemVersion],\n        widths: [17, -1],\n      ),\n    );\n    _colprint(['path separator', Platform.pathSeparator]);\n    print('');\n    _colprint(['dart version', DartSdk().version]);\n  }\n\n  void _colprint(List<String?> cols) {\n    //cols[0] = green(cols[0]);\n    print(Format().row(cols, widths: [17, 55], delimiter: ' '));\n  }\n\n  @override\n  String description({bool extended = false}) => \"\"\"\nRunning 'dcli doctor' provides diagnostic information on your install \n   and optionally a specific script.\"\"\";\n\n  @override\n  String usage() => 'doctor [<script path.dart>]';\n\n  @override\n  List<String> completion(String word) => completionExpandScripts(word);\n\n  void _showPermissions(String label, String path) {\n    var finallabel = label;\n    if (exists(path)) {\n      final fstat = stat(path);\n\n      final owner = _Owner(path);\n\n      finallabel = label.padRight(20);\n\n      final username = Shell.current.loggedInUser;\n      if (username != null) {\n        print(\n          Format().row(\n            [\n              finallabel,\n              fstat.modeString(),\n              '<user>:${owner.group == owner.user ? '<user>' : owner.group}',\n              '${privatePath(path)} '\n            ],\n            widths: [17, 9, 16, -1],\n            alignments: [\n              TableAlignment.left,\n              TableAlignment.left,\n              TableAlignment.middle,\n              TableAlignment.left\n            ],\n          ),\n        );\n      }\n    } else {\n      _colprint([finallabel, '${privatePath(path)} does not exist']);\n    }\n  }\n\n  @override\n  List<Flag> flags() => [];"}
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:03.733826 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:03.733826
[ReorderMembersFix] 2025-10-18T11:45:03.734086 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/doctor.dart:
[ReorderMembersFix] 2025-10-18T11:45:03.734086 ConflictingEditException: {"offset":6244,"length":462,"replacement":"  String? user;\n\n  String? group;\n\n  _Owner(String path) {\n    if (Settings().isWindows) {\n      user = 'Unknown';\n      group = 'Unknown';\n    } else {\n      final lsLine = 'ls -alFd $path'.firstLine;\n\n      if (lsLine == null) {\n        throw DCliException('No file/directory matched ${truepath(path)}');\n      }\n\n      final parts = lsLine.split(' ');\n      user = parts[2];\n      group = parts[3];\n    }\n  }\n\n  @override\n  String toString() => '$user:$group';"} conflicts with {"offset":6244,"length":462,"replacement":"  String? user;\n\n  String? group;\n\n  _Owner(String path) {\n    if (Settings().isWindows) {\n      user = 'Unknown';\n      group = 'Unknown';\n    } else {\n      final lsLine = 'ls -alFd $path'.firstLine;\n\n      if (lsLine == null) {\n        throw DCliException('No file/directory matched ${truepath(path)}');\n      }\n\n      final parts = lsLine.split(' ');\n      user = parts[2];\n      group = parts[3];\n    }\n  }\n\n  @override\n  String toString() => '$user:$group';"}
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:03.734086 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:03.734086
[ReorderMembersFix] 2025-10-18T11:45:03.734191 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/doctor.dart:
[ReorderMembersFix] 2025-10-18T11:45:03.734191 ConflictingEditException: {"offset":410,"length":5815,"replacement":"  static const _commandName = 'doctor';\n\n  ///\n  DoctorCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var showScriptDetails = false;\n\n    late DartScript script;\n    if (subarguments.length == 1) {\n      showScriptDetails = true;\n      final scriptPath = subarguments[0];\n      RunCommand.validateScriptPath(scriptPath);\n      script = DartScript.fromFile(scriptPath);\n    }\n    if (subarguments.length > 1) {\n      throw InvalidCommandArgumentException(\n        \"'dcli doctor' takes zero or one arguments. Found $subarguments\",\n      );\n    }\n\n    _colprint(['DCli version', Settings().version]);\n    print('');\n\n    _printPlatform();\n    print('');\n\n    _printExePaths();\n    print('');\n\n    _printPubCache();\n    print('');\n\n    _printPackageConfig();\n    print('');\n\n    _printPATH();\n    print('');\n\n    _printShell();\n    print('');\n\n    _printDartLocations();\n    print('');\n\n    _printPermissions();\n    print('');\n\n    if (showScriptDetails) {\n      script.doctor;\n    }\n    return 0;\n  }\n\n  void _printDartLocations() {\n    print('dart location(s)');\n    which('dart').paths.forEach((line) => _colprint(['', line]));\n  }\n\n  void _printPermissions() {\n    print('permissions');\n    _showPermissions('HOME', HOME);\n    _showPermissions('.dcli', Settings().pathToDCli);\n\n    _showPermissions('project template', Settings().pathToTemplateProject);\n    _showPermissions('script template', Settings().pathToTemplateScript);\n\n    _showPermissions('pub cache', PubCache().pathTo);\n  }\n\n  void _printShell() {\n    print('shell settings');\n    _colprint([r'$SHELL', env['SHELL'] ?? '']);\n\n    final shell = Shell.current;\n    _colprint(['detected', shell.name]);\n\n    if (shell.hasStartScript) {\n      final startScriptPath = shell.pathToStartScript;\n      _colprint(['start script', privatePath(startScriptPath ?? 'not found')]);\n    } else {\n      _colprint(['start sript', 'not supported by shell']);\n    }\n  }\n\n  void _printPATH() {\n    print('PATH');\n    for (final path in PATH) {\n      _colprint(['', privatePath(path)]);\n    }\n  }\n\n  void _printPackageConfig() {\n    _colprint([\n      'package config',\n      privatePath(Platform.packageConfig ?? 'not passed')\n    ]);\n  }\n\n  void _printPubCache() {\n    final pathToPubCache = PubCache().pathTo;\n    _colprint(['pub cache', privatePath(pathToPubCache)]);\n\n    _colprint(\n      ['PUB_CACHE Env', '${envs.containsKey(PubCache.envVarPubCache)}'],\n    );\n  }\n\n  void _printExePaths() {\n    final pathToDCli = DCliPaths().pathToDCli;\n    _colprint([\n      'dcli path',\n      if (pathToDCli == null) 'Not found' else privatePath(pathToDCli)\n    ]);\n    _colprint(\n        ['dart exe path', privatePath(DartSdk().pathToDartExe ?? 'not found')]);\n\n    final dartPath = which(DartSdk.dartExeName).path;\n    _colprint([\n      'dart path',\n      privatePath(DartSdk().pathToDartExe ?? 'not found'),\n      'which: ${privatePath(dartPath ?? 'not found')}'\n    ]);\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['compiler', \"using 'dart compile exe'\"]);\n    } else {\n      _colprint(['compiler', \"using 'dart2native'\"]);\n      final dart2NativePath = which(DartSdk.dart2NativeExeName).path;\n\n      if (dart2NativePath != null) {\n        _colprint([\n          'dart2Native path',\n          privatePath(DartSdk().pathToDartToNativeExe ?? 'not found'),\n          'which: ${privatePath(dart2NativePath)}'\n        ]);\n      } else {\n        _colprint([\n          'dart2Native path',\n          'Not Found',\n        ]);\n      }\n    }\n    print('');\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['pub', \"using 'dart pub'\"]);\n    } else {\n      final pubPath = which(DartSdk.pubExeName).path;\n\n      if (pubPath != null) {\n        _colprint([\n          'pub path',\n          privatePath(DartSdk().pathToPubExe ?? 'not found'),\n          'which: ${privatePath(pubPath)}'\n        ]);\n      } else {\n        _colprint([\n          'pub path',\n          'not Found',\n        ]);\n      }\n      _colprint(['Pub cache', privatePath(PubCache().pathTo)]);\n    }\n  }\n\n  void _printPlatform() {\n    _colprint(['os', Platform.operatingSystem]);\n    print(\n      Format().row(\n        ['os version', Platform.operatingSystemVersion],\n        widths: [17, -1],\n      ),\n    );\n    _colprint(['path separator', Platform.pathSeparator]);\n    print('');\n    _colprint(['dart version', DartSdk().version]);\n  }\n\n  void _colprint(List<String?> cols) {\n    //cols[0] = green(cols[0]);\n    print(Format().row(cols, widths: [17, 55], delimiter: ' '));\n  }\n\n  @override\n  String description({bool extended = false}) => \"\"\"\nRunning 'dcli doctor' provides diagnostic information on your install \n   and optionally a specific script.\"\"\";\n\n  @override\n  String usage() => 'doctor [<script path.dart>]';\n\n  @override\n  List<String> completion(String word) => completionExpandScripts(word);\n\n  void _showPermissions(String label, String path) {\n    var finallabel = label;\n    if (exists(path)) {\n      final fstat = stat(path);\n\n      final owner = _Owner(path);\n\n      finallabel = label.padRight(20);\n\n      final username = Shell.current.loggedInUser;\n      if (username != null) {\n        print(\n          Format().row(\n            [\n              finallabel,\n              fstat.modeString(),\n              '<user>:${owner.group == owner.user ? '<user>' : owner.group}',\n              '${privatePath(path)} '\n            ],\n            widths: [17, 9, 16, -1],\n            alignments: [\n              TableAlignment.left,\n              TableAlignment.left,\n              TableAlignment.middle,\n              TableAlignment.left\n            ],\n          ),\n        );\n      }\n    } else {\n      _colprint([finallabel, '${privatePath(path)} does not exist']);\n    }\n  }\n\n  @override\n  List<Flag> flags() => [];"} conflicts with {"offset":410,"length":5815,"replacement":"  static const _commandName = 'doctor';\n\n  ///\n  DoctorCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var showScriptDetails = false;\n\n    late DartScript script;\n    if (subarguments.length == 1) {\n      showScriptDetails = true;\n      final scriptPath = subarguments[0];\n      RunCommand.validateScriptPath(scriptPath);\n      script = DartScript.fromFile(scriptPath);\n    }\n    if (subarguments.length > 1) {\n      throw InvalidCommandArgumentException(\n        \"'dcli doctor' takes zero or one arguments. Found $subarguments\",\n      );\n    }\n\n    _colprint(['DCli version', Settings().version]);\n    print('');\n\n    _printPlatform();\n    print('');\n\n    _printExePaths();\n    print('');\n\n    _printPubCache();\n    print('');\n\n    _printPackageConfig();\n    print('');\n\n    _printPATH();\n    print('');\n\n    _printShell();\n    print('');\n\n    _printDartLocations();\n    print('');\n\n    _printPermissions();\n    print('');\n\n    if (showScriptDetails) {\n      script.doctor;\n    }\n    return 0;\n  }\n\n  void _printDartLocations() {\n    print('dart location(s)');\n    which('dart').paths.forEach((line) => _colprint(['', line]));\n  }\n\n  void _printPermissions() {\n    print('permissions');\n    _showPermissions('HOME', HOME);\n    _showPermissions('.dcli', Settings().pathToDCli);\n\n    _showPermissions('project template', Settings().pathToTemplateProject);\n    _showPermissions('script template', Settings().pathToTemplateScript);\n\n    _showPermissions('pub cache', PubCache().pathTo);\n  }\n\n  void _printShell() {\n    print('shell settings');\n    _colprint([r'$SHELL', env['SHELL'] ?? '']);\n\n    final shell = Shell.current;\n    _colprint(['detected', shell.name]);\n\n    if (shell.hasStartScript) {\n      final startScriptPath = shell.pathToStartScript;\n      _colprint(['start script', privatePath(startScriptPath ?? 'not found')]);\n    } else {\n      _colprint(['start sript', 'not supported by shell']);\n    }\n  }\n\n  void _printPATH() {\n    print('PATH');\n    for (final path in PATH) {\n      _colprint(['', privatePath(path)]);\n    }\n  }\n\n  void _printPackageConfig() {\n    _colprint([\n      'package config',\n      privatePath(Platform.packageConfig ?? 'not passed')\n    ]);\n  }\n\n  void _printPubCache() {\n    final pathToPubCache = PubCache().pathTo;\n    _colprint(['pub cache', privatePath(pathToPubCache)]);\n\n    _colprint(\n      ['PUB_CACHE Env', '${envs.containsKey(PubCache.envVarPubCache)}'],\n    );\n  }\n\n  void _printExePaths() {\n    final pathToDCli = DCliPaths().pathToDCli;\n    _colprint([\n      'dcli path',\n      if (pathToDCli == null) 'Not found' else privatePath(pathToDCli)\n    ]);\n    _colprint(\n        ['dart exe path', privatePath(DartSdk().pathToDartExe ?? 'not found')]);\n\n    final dartPath = which(DartSdk.dartExeName).path;\n    _colprint([\n      'dart path',\n      privatePath(DartSdk().pathToDartExe ?? 'not found'),\n      'which: ${privatePath(dartPath ?? 'not found')}'\n    ]);\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['compiler', \"using 'dart compile exe'\"]);\n    } else {\n      _colprint(['compiler', \"using 'dart2native'\"]);\n      final dart2NativePath = which(DartSdk.dart2NativeExeName).path;\n\n      if (dart2NativePath != null) {\n        _colprint([\n          'dart2Native path',\n          privatePath(DartSdk().pathToDartToNativeExe ?? 'not found'),\n          'which: ${privatePath(dart2NativePath)}'\n        ]);\n      } else {\n        _colprint([\n          'dart2Native path',\n          'Not Found',\n        ]);\n      }\n    }\n    print('');\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['pub', \"using 'dart pub'\"]);\n    } else {\n      final pubPath = which(DartSdk.pubExeName).path;\n\n      if (pubPath != null) {\n        _colprint([\n          'pub path',\n          privatePath(DartSdk().pathToPubExe ?? 'not found'),\n          'which: ${privatePath(pubPath)}'\n        ]);\n      } else {\n        _colprint([\n          'pub path',\n          'not Found',\n        ]);\n      }\n      _colprint(['Pub cache', privatePath(PubCache().pathTo)]);\n    }\n  }\n\n  void _printPlatform() {\n    _colprint(['os', Platform.operatingSystem]);\n    print(\n      Format().row(\n        ['os version', Platform.operatingSystemVersion],\n        widths: [17, -1],\n      ),\n    );\n    _colprint(['path separator', Platform.pathSeparator]);\n    print('');\n    _colprint(['dart version', DartSdk().version]);\n  }\n\n  void _colprint(List<String?> cols) {\n    //cols[0] = green(cols[0]);\n    print(Format().row(cols, widths: [17, 55], delimiter: ' '));\n  }\n\n  @override\n  String description({bool extended = false}) => \"\"\"\nRunning 'dcli doctor' provides diagnostic information on your install \n   and optionally a specific script.\"\"\";\n\n  @override\n  String usage() => 'doctor [<script path.dart>]';\n\n  @override\n  List<String> completion(String word) => completionExpandScripts(word);\n\n  void _showPermissions(String label, String path) {\n    var finallabel = label;\n    if (exists(path)) {\n      final fstat = stat(path);\n\n      final owner = _Owner(path);\n\n      finallabel = label.padRight(20);\n\n      final username = Shell.current.loggedInUser;\n      if (username != null) {\n        print(\n          Format().row(\n            [\n              finallabel,\n              fstat.modeString(),\n              '<user>:${owner.group == owner.user ? '<user>' : owner.group}',\n              '${privatePath(path)} '\n            ],\n            widths: [17, 9, 16, -1],\n            alignments: [\n              TableAlignment.left,\n              TableAlignment.left,\n              TableAlignment.middle,\n              TableAlignment.left\n            ],\n          ),\n        );\n      }\n    } else {\n      _colprint([finallabel, '${privatePath(path)} does not exist']);\n    }\n  }\n\n  @override\n  List<Flag> flags() => [];"}
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:03.734191 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:03.734191
[ReorderMembersFix] 2025-10-18T11:45:04.083864 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/doctor.dart:
[ReorderMembersFix] 2025-10-18T11:45:04.083864 ConflictingEditException: {"offset":6244,"length":462,"replacement":"  String? user;\n\n  String? group;\n\n  _Owner(String path) {\n    if (Settings().isWindows) {\n      user = 'Unknown';\n      group = 'Unknown';\n    } else {\n      final lsLine = 'ls -alFd $path'.firstLine;\n\n      if (lsLine == null) {\n        throw DCliException('No file/directory matched ${truepath(path)}');\n      }\n\n      final parts = lsLine.split(' ');\n      user = parts[2];\n      group = parts[3];\n    }\n  }\n\n  @override\n  String toString() => '$user:$group';"} conflicts with {"offset":6244,"length":462,"replacement":"  String? user;\n\n  String? group;\n\n  _Owner(String path) {\n    if (Settings().isWindows) {\n      user = 'Unknown';\n      group = 'Unknown';\n    } else {\n      final lsLine = 'ls -alFd $path'.firstLine;\n\n      if (lsLine == null) {\n        throw DCliException('No file/directory matched ${truepath(path)}');\n      }\n\n      final parts = lsLine.split(' ');\n      user = parts[2];\n      group = parts[3];\n    }\n  }\n\n  @override\n  String toString() => '$user:$group';"}
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:04.083864 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:04.083864
[ReorderMembersFix] 2025-10-18T11:45:04.085736 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/doctor.dart:
[ReorderMembersFix] 2025-10-18T11:45:04.085736 ConflictingEditException: {"offset":410,"length":5815,"replacement":"  static const _commandName = 'doctor';\n\n  ///\n  DoctorCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var showScriptDetails = false;\n\n    late DartScript script;\n    if (subarguments.length == 1) {\n      showScriptDetails = true;\n      final scriptPath = subarguments[0];\n      RunCommand.validateScriptPath(scriptPath);\n      script = DartScript.fromFile(scriptPath);\n    }\n    if (subarguments.length > 1) {\n      throw InvalidCommandArgumentException(\n        \"'dcli doctor' takes zero or one arguments. Found $subarguments\",\n      );\n    }\n\n    _colprint(['DCli version', Settings().version]);\n    print('');\n\n    _printPlatform();\n    print('');\n\n    _printExePaths();\n    print('');\n\n    _printPubCache();\n    print('');\n\n    _printPackageConfig();\n    print('');\n\n    _printPATH();\n    print('');\n\n    _printShell();\n    print('');\n\n    _printDartLocations();\n    print('');\n\n    _printPermissions();\n    print('');\n\n    if (showScriptDetails) {\n      script.doctor;\n    }\n    return 0;\n  }\n\n  void _printDartLocations() {\n    print('dart location(s)');\n    which('dart').paths.forEach((line) => _colprint(['', line]));\n  }\n\n  void _printPermissions() {\n    print('permissions');\n    _showPermissions('HOME', HOME);\n    _showPermissions('.dcli', Settings().pathToDCli);\n\n    _showPermissions('project template', Settings().pathToTemplateProject);\n    _showPermissions('script template', Settings().pathToTemplateScript);\n\n    _showPermissions('pub cache', PubCache().pathTo);\n  }\n\n  void _printShell() {\n    print('shell settings');\n    _colprint([r'$SHELL', env['SHELL'] ?? '']);\n\n    final shell = Shell.current;\n    _colprint(['detected', shell.name]);\n\n    if (shell.hasStartScript) {\n      final startScriptPath = shell.pathToStartScript;\n      _colprint(['start script', privatePath(startScriptPath ?? 'not found')]);\n    } else {\n      _colprint(['start sript', 'not supported by shell']);\n    }\n  }\n\n  void _printPATH() {\n    print('PATH');\n    for (final path in PATH) {\n      _colprint(['', privatePath(path)]);\n    }\n  }\n\n  void _printPackageConfig() {\n    _colprint([\n      'package config',\n      privatePath(Platform.packageConfig ?? 'not passed')\n    ]);\n  }\n\n  void _printPubCache() {\n    final pathToPubCache = PubCache().pathTo;\n    _colprint(['pub cache', privatePath(pathToPubCache)]);\n\n    _colprint(\n      ['PUB_CACHE Env', '${envs.containsKey(PubCache.envVarPubCache)}'],\n    );\n  }\n\n  void _printExePaths() {\n    final pathToDCli = DCliPaths().pathToDCli;\n    _colprint([\n      'dcli path',\n      if (pathToDCli == null) 'Not found' else privatePath(pathToDCli)\n    ]);\n    _colprint(\n        ['dart exe path', privatePath(DartSdk().pathToDartExe ?? 'not found')]);\n\n    final dartPath = which(DartSdk.dartExeName).path;\n    _colprint([\n      'dart path',\n      privatePath(DartSdk().pathToDartExe ?? 'not found'),\n      'which: ${privatePath(dartPath ?? 'not found')}'\n    ]);\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['compiler', \"using 'dart compile exe'\"]);\n    } else {\n      _colprint(['compiler', \"using 'dart2native'\"]);\n      final dart2NativePath = which(DartSdk.dart2NativeExeName).path;\n\n      if (dart2NativePath != null) {\n        _colprint([\n          'dart2Native path',\n          privatePath(DartSdk().pathToDartToNativeExe ?? 'not found'),\n          'which: ${privatePath(dart2NativePath)}'\n        ]);\n      } else {\n        _colprint([\n          'dart2Native path',\n          'Not Found',\n        ]);\n      }\n    }\n    print('');\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['pub', \"using 'dart pub'\"]);\n    } else {\n      final pubPath = which(DartSdk.pubExeName).path;\n\n      if (pubPath != null) {\n        _colprint([\n          'pub path',\n          privatePath(DartSdk().pathToPubExe ?? 'not found'),\n          'which: ${privatePath(pubPath)}'\n        ]);\n      } else {\n        _colprint([\n          'pub path',\n          'not Found',\n        ]);\n      }\n      _colprint(['Pub cache', privatePath(PubCache().pathTo)]);\n    }\n  }\n\n  void _printPlatform() {\n    _colprint(['os', Platform.operatingSystem]);\n    print(\n      Format().row(\n        ['os version', Platform.operatingSystemVersion],\n        widths: [17, -1],\n      ),\n    );\n    _colprint(['path separator', Platform.pathSeparator]);\n    print('');\n    _colprint(['dart version', DartSdk().version]);\n  }\n\n  void _colprint(List<String?> cols) {\n    //cols[0] = green(cols[0]);\n    print(Format().row(cols, widths: [17, 55], delimiter: ' '));\n  }\n\n  @override\n  String description({bool extended = false}) => \"\"\"\nRunning 'dcli doctor' provides diagnostic information on your install \n   and optionally a specific script.\"\"\";\n\n  @override\n  String usage() => 'doctor [<script path.dart>]';\n\n  @override\n  List<String> completion(String word) => completionExpandScripts(word);\n\n  void _showPermissions(String label, String path) {\n    var finallabel = label;\n    if (exists(path)) {\n      final fstat = stat(path);\n\n      final owner = _Owner(path);\n\n      finallabel = label.padRight(20);\n\n      final username = Shell.current.loggedInUser;\n      if (username != null) {\n        print(\n          Format().row(\n            [\n              finallabel,\n              fstat.modeString(),\n              '<user>:${owner.group == owner.user ? '<user>' : owner.group}',\n              '${privatePath(path)} '\n            ],\n            widths: [17, 9, 16, -1],\n            alignments: [\n              TableAlignment.left,\n              TableAlignment.left,\n              TableAlignment.middle,\n              TableAlignment.left\n            ],\n          ),\n        );\n      }\n    } else {\n      _colprint([finallabel, '${privatePath(path)} does not exist']);\n    }\n  }\n\n  @override\n  List<Flag> flags() => [];"} conflicts with {"offset":410,"length":5815,"replacement":"  static const _commandName = 'doctor';\n\n  ///\n  DoctorCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var showScriptDetails = false;\n\n    late DartScript script;\n    if (subarguments.length == 1) {\n      showScriptDetails = true;\n      final scriptPath = subarguments[0];\n      RunCommand.validateScriptPath(scriptPath);\n      script = DartScript.fromFile(scriptPath);\n    }\n    if (subarguments.length > 1) {\n      throw InvalidCommandArgumentException(\n        \"'dcli doctor' takes zero or one arguments. Found $subarguments\",\n      );\n    }\n\n    _colprint(['DCli version', Settings().version]);\n    print('');\n\n    _printPlatform();\n    print('');\n\n    _printExePaths();\n    print('');\n\n    _printPubCache();\n    print('');\n\n    _printPackageConfig();\n    print('');\n\n    _printPATH();\n    print('');\n\n    _printShell();\n    print('');\n\n    _printDartLocations();\n    print('');\n\n    _printPermissions();\n    print('');\n\n    if (showScriptDetails) {\n      script.doctor;\n    }\n    return 0;\n  }\n\n  void _printDartLocations() {\n    print('dart location(s)');\n    which('dart').paths.forEach((line) => _colprint(['', line]));\n  }\n\n  void _printPermissions() {\n    print('permissions');\n    _showPermissions('HOME', HOME);\n    _showPermissions('.dcli', Settings().pathToDCli);\n\n    _showPermissions('project template', Settings().pathToTemplateProject);\n    _showPermissions('script template', Settings().pathToTemplateScript);\n\n    _showPermissions('pub cache', PubCache().pathTo);\n  }\n\n  void _printShell() {\n    print('shell settings');\n    _colprint([r'$SHELL', env['SHELL'] ?? '']);\n\n    final shell = Shell.current;\n    _colprint(['detected', shell.name]);\n\n    if (shell.hasStartScript) {\n      final startScriptPath = shell.pathToStartScript;\n      _colprint(['start script', privatePath(startScriptPath ?? 'not found')]);\n    } else {\n      _colprint(['start sript', 'not supported by shell']);\n    }\n  }\n\n  void _printPATH() {\n    print('PATH');\n    for (final path in PATH) {\n      _colprint(['', privatePath(path)]);\n    }\n  }\n\n  void _printPackageConfig() {\n    _colprint([\n      'package config',\n      privatePath(Platform.packageConfig ?? 'not passed')\n    ]);\n  }\n\n  void _printPubCache() {\n    final pathToPubCache = PubCache().pathTo;\n    _colprint(['pub cache', privatePath(pathToPubCache)]);\n\n    _colprint(\n      ['PUB_CACHE Env', '${envs.containsKey(PubCache.envVarPubCache)}'],\n    );\n  }\n\n  void _printExePaths() {\n    final pathToDCli = DCliPaths().pathToDCli;\n    _colprint([\n      'dcli path',\n      if (pathToDCli == null) 'Not found' else privatePath(pathToDCli)\n    ]);\n    _colprint(\n        ['dart exe path', privatePath(DartSdk().pathToDartExe ?? 'not found')]);\n\n    final dartPath = which(DartSdk.dartExeName).path;\n    _colprint([\n      'dart path',\n      privatePath(DartSdk().pathToDartExe ?? 'not found'),\n      'which: ${privatePath(dartPath ?? 'not found')}'\n    ]);\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['compiler', \"using 'dart compile exe'\"]);\n    } else {\n      _colprint(['compiler', \"using 'dart2native'\"]);\n      final dart2NativePath = which(DartSdk.dart2NativeExeName).path;\n\n      if (dart2NativePath != null) {\n        _colprint([\n          'dart2Native path',\n          privatePath(DartSdk().pathToDartToNativeExe ?? 'not found'),\n          'which: ${privatePath(dart2NativePath)}'\n        ]);\n      } else {\n        _colprint([\n          'dart2Native path',\n          'Not Found',\n        ]);\n      }\n    }\n    print('');\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['pub', \"using 'dart pub'\"]);\n    } else {\n      final pubPath = which(DartSdk.pubExeName).path;\n\n      if (pubPath != null) {\n        _colprint([\n          'pub path',\n          privatePath(DartSdk().pathToPubExe ?? 'not found'),\n          'which: ${privatePath(pubPath)}'\n        ]);\n      } else {\n        _colprint([\n          'pub path',\n          'not Found',\n        ]);\n      }\n      _colprint(['Pub cache', privatePath(PubCache().pathTo)]);\n    }\n  }\n\n  void _printPlatform() {\n    _colprint(['os', Platform.operatingSystem]);\n    print(\n      Format().row(\n        ['os version', Platform.operatingSystemVersion],\n        widths: [17, -1],\n      ),\n    );\n    _colprint(['path separator', Platform.pathSeparator]);\n    print('');\n    _colprint(['dart version', DartSdk().version]);\n  }\n\n  void _colprint(List<String?> cols) {\n    //cols[0] = green(cols[0]);\n    print(Format().row(cols, widths: [17, 55], delimiter: ' '));\n  }\n\n  @override\n  String description({bool extended = false}) => \"\"\"\nRunning 'dcli doctor' provides diagnostic information on your install \n   and optionally a specific script.\"\"\";\n\n  @override\n  String usage() => 'doctor [<script path.dart>]';\n\n  @override\n  List<String> completion(String word) => completionExpandScripts(word);\n\n  void _showPermissions(String label, String path) {\n    var finallabel = label;\n    if (exists(path)) {\n      final fstat = stat(path);\n\n      final owner = _Owner(path);\n\n      finallabel = label.padRight(20);\n\n      final username = Shell.current.loggedInUser;\n      if (username != null) {\n        print(\n          Format().row(\n            [\n              finallabel,\n              fstat.modeString(),\n              '<user>:${owner.group == owner.user ? '<user>' : owner.group}',\n              '${privatePath(path)} '\n            ],\n            widths: [17, 9, 16, -1],\n            alignments: [\n              TableAlignment.left,\n              TableAlignment.left,\n              TableAlignment.middle,\n              TableAlignment.left\n            ],\n          ),\n        );\n      }\n    } else {\n      _colprint([finallabel, '${privatePath(path)} does not exist']);\n    }\n  }\n\n  @override\n  List<Flag> flags() => [];"}
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:04.085736 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:04.085736
[ReorderMembersFix] 2025-10-18T11:45:05.155568 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/doctor.dart:
[ReorderMembersFix] 2025-10-18T11:45:05.155568 ConflictingEditException: {"offset":6244,"length":462,"replacement":"  String? user;\n\n  String? group;\n\n  _Owner(String path) {\n    if (Settings().isWindows) {\n      user = 'Unknown';\n      group = 'Unknown';\n    } else {\n      final lsLine = 'ls -alFd $path'.firstLine;\n\n      if (lsLine == null) {\n        throw DCliException('No file/directory matched ${truepath(path)}');\n      }\n\n      final parts = lsLine.split(' ');\n      user = parts[2];\n      group = parts[3];\n    }\n  }\n\n  @override\n  String toString() => '$user:$group';"} conflicts with {"offset":6244,"length":462,"replacement":"  String? user;\n\n  String? group;\n\n  _Owner(String path) {\n    if (Settings().isWindows) {\n      user = 'Unknown';\n      group = 'Unknown';\n    } else {\n      final lsLine = 'ls -alFd $path'.firstLine;\n\n      if (lsLine == null) {\n        throw DCliException('No file/directory matched ${truepath(path)}');\n      }\n\n      final parts = lsLine.split(' ');\n      user = parts[2];\n      group = parts[3];\n    }\n  }\n\n  @override\n  String toString() => '$user:$group';"}
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:05.155568 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:05.155568
[ReorderMembersFix] 2025-10-18T11:45:05.155993 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/doctor.dart:
[ReorderMembersFix] 2025-10-18T11:45:05.155993 ConflictingEditException: {"offset":410,"length":5815,"replacement":"  static const _commandName = 'doctor';\n\n  ///\n  DoctorCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var showScriptDetails = false;\n\n    late DartScript script;\n    if (subarguments.length == 1) {\n      showScriptDetails = true;\n      final scriptPath = subarguments[0];\n      RunCommand.validateScriptPath(scriptPath);\n      script = DartScript.fromFile(scriptPath);\n    }\n    if (subarguments.length > 1) {\n      throw InvalidCommandArgumentException(\n        \"'dcli doctor' takes zero or one arguments. Found $subarguments\",\n      );\n    }\n\n    _colprint(['DCli version', Settings().version]);\n    print('');\n\n    _printPlatform();\n    print('');\n\n    _printExePaths();\n    print('');\n\n    _printPubCache();\n    print('');\n\n    _printPackageConfig();\n    print('');\n\n    _printPATH();\n    print('');\n\n    _printShell();\n    print('');\n\n    _printDartLocations();\n    print('');\n\n    _printPermissions();\n    print('');\n\n    if (showScriptDetails) {\n      script.doctor;\n    }\n    return 0;\n  }\n\n  void _printDartLocations() {\n    print('dart location(s)');\n    which('dart').paths.forEach((line) => _colprint(['', line]));\n  }\n\n  void _printPermissions() {\n    print('permissions');\n    _showPermissions('HOME', HOME);\n    _showPermissions('.dcli', Settings().pathToDCli);\n\n    _showPermissions('project template', Settings().pathToTemplateProject);\n    _showPermissions('script template', Settings().pathToTemplateScript);\n\n    _showPermissions('pub cache', PubCache().pathTo);\n  }\n\n  void _printShell() {\n    print('shell settings');\n    _colprint([r'$SHELL', env['SHELL'] ?? '']);\n\n    final shell = Shell.current;\n    _colprint(['detected', shell.name]);\n\n    if (shell.hasStartScript) {\n      final startScriptPath = shell.pathToStartScript;\n      _colprint(['start script', privatePath(startScriptPath ?? 'not found')]);\n    } else {\n      _colprint(['start sript', 'not supported by shell']);\n    }\n  }\n\n  void _printPATH() {\n    print('PATH');\n    for (final path in PATH) {\n      _colprint(['', privatePath(path)]);\n    }\n  }\n\n  void _printPackageConfig() {\n    _colprint([\n      'package config',\n      privatePath(Platform.packageConfig ?? 'not passed')\n    ]);\n  }\n\n  void _printPubCache() {\n    final pathToPubCache = PubCache().pathTo;\n    _colprint(['pub cache', privatePath(pathToPubCache)]);\n\n    _colprint(\n      ['PUB_CACHE Env', '${envs.containsKey(PubCache.envVarPubCache)}'],\n    );\n  }\n\n  void _printExePaths() {\n    final pathToDCli = DCliPaths().pathToDCli;\n    _colprint([\n      'dcli path',\n      if (pathToDCli == null) 'Not found' else privatePath(pathToDCli)\n    ]);\n    _colprint(\n        ['dart exe path', privatePath(DartSdk().pathToDartExe ?? 'not found')]);\n\n    final dartPath = which(DartSdk.dartExeName).path;\n    _colprint([\n      'dart path',\n      privatePath(DartSdk().pathToDartExe ?? 'not found'),\n      'which: ${privatePath(dartPath ?? 'not found')}'\n    ]);\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['compiler', \"using 'dart compile exe'\"]);\n    } else {\n      _colprint(['compiler', \"using 'dart2native'\"]);\n      final dart2NativePath = which(DartSdk.dart2NativeExeName).path;\n\n      if (dart2NativePath != null) {\n        _colprint([\n          'dart2Native path',\n          privatePath(DartSdk().pathToDartToNativeExe ?? 'not found'),\n          'which: ${privatePath(dart2NativePath)}'\n        ]);\n      } else {\n        _colprint([\n          'dart2Native path',\n          'Not Found',\n        ]);\n      }\n    }\n    print('');\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['pub', \"using 'dart pub'\"]);\n    } else {\n      final pubPath = which(DartSdk.pubExeName).path;\n\n      if (pubPath != null) {\n        _colprint([\n          'pub path',\n          privatePath(DartSdk().pathToPubExe ?? 'not found'),\n          'which: ${privatePath(pubPath)}'\n        ]);\n      } else {\n        _colprint([\n          'pub path',\n          'not Found',\n        ]);\n      }\n      _colprint(['Pub cache', privatePath(PubCache().pathTo)]);\n    }\n  }\n\n  void _printPlatform() {\n    _colprint(['os', Platform.operatingSystem]);\n    print(\n      Format().row(\n        ['os version', Platform.operatingSystemVersion],\n        widths: [17, -1],\n      ),\n    );\n    _colprint(['path separator', Platform.pathSeparator]);\n    print('');\n    _colprint(['dart version', DartSdk().version]);\n  }\n\n  void _colprint(List<String?> cols) {\n    //cols[0] = green(cols[0]);\n    print(Format().row(cols, widths: [17, 55], delimiter: ' '));\n  }\n\n  @override\n  String description({bool extended = false}) => \"\"\"\nRunning 'dcli doctor' provides diagnostic information on your install \n   and optionally a specific script.\"\"\";\n\n  @override\n  String usage() => 'doctor [<script path.dart>]';\n\n  @override\n  List<String> completion(String word) => completionExpandScripts(word);\n\n  void _showPermissions(String label, String path) {\n    var finallabel = label;\n    if (exists(path)) {\n      final fstat = stat(path);\n\n      final owner = _Owner(path);\n\n      finallabel = label.padRight(20);\n\n      final username = Shell.current.loggedInUser;\n      if (username != null) {\n        print(\n          Format().row(\n            [\n              finallabel,\n              fstat.modeString(),\n              '<user>:${owner.group == owner.user ? '<user>' : owner.group}',\n              '${privatePath(path)} '\n            ],\n            widths: [17, 9, 16, -1],\n            alignments: [\n              TableAlignment.left,\n              TableAlignment.left,\n              TableAlignment.middle,\n              TableAlignment.left\n            ],\n          ),\n        );\n      }\n    } else {\n      _colprint([finallabel, '${privatePath(path)} does not exist']);\n    }\n  }\n\n  @override\n  List<Flag> flags() => [];"} conflicts with {"offset":410,"length":5815,"replacement":"  static const _commandName = 'doctor';\n\n  ///\n  DoctorCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var showScriptDetails = false;\n\n    late DartScript script;\n    if (subarguments.length == 1) {\n      showScriptDetails = true;\n      final scriptPath = subarguments[0];\n      RunCommand.validateScriptPath(scriptPath);\n      script = DartScript.fromFile(scriptPath);\n    }\n    if (subarguments.length > 1) {\n      throw InvalidCommandArgumentException(\n        \"'dcli doctor' takes zero or one arguments. Found $subarguments\",\n      );\n    }\n\n    _colprint(['DCli version', Settings().version]);\n    print('');\n\n    _printPlatform();\n    print('');\n\n    _printExePaths();\n    print('');\n\n    _printPubCache();\n    print('');\n\n    _printPackageConfig();\n    print('');\n\n    _printPATH();\n    print('');\n\n    _printShell();\n    print('');\n\n    _printDartLocations();\n    print('');\n\n    _printPermissions();\n    print('');\n\n    if (showScriptDetails) {\n      script.doctor;\n    }\n    return 0;\n  }\n\n  void _printDartLocations() {\n    print('dart location(s)');\n    which('dart').paths.forEach((line) => _colprint(['', line]));\n  }\n\n  void _printPermissions() {\n    print('permissions');\n    _showPermissions('HOME', HOME);\n    _showPermissions('.dcli', Settings().pathToDCli);\n\n    _showPermissions('project template', Settings().pathToTemplateProject);\n    _showPermissions('script template', Settings().pathToTemplateScript);\n\n    _showPermissions('pub cache', PubCache().pathTo);\n  }\n\n  void _printShell() {\n    print('shell settings');\n    _colprint([r'$SHELL', env['SHELL'] ?? '']);\n\n    final shell = Shell.current;\n    _colprint(['detected', shell.name]);\n\n    if (shell.hasStartScript) {\n      final startScriptPath = shell.pathToStartScript;\n      _colprint(['start script', privatePath(startScriptPath ?? 'not found')]);\n    } else {\n      _colprint(['start sript', 'not supported by shell']);\n    }\n  }\n\n  void _printPATH() {\n    print('PATH');\n    for (final path in PATH) {\n      _colprint(['', privatePath(path)]);\n    }\n  }\n\n  void _printPackageConfig() {\n    _colprint([\n      'package config',\n      privatePath(Platform.packageConfig ?? 'not passed')\n    ]);\n  }\n\n  void _printPubCache() {\n    final pathToPubCache = PubCache().pathTo;\n    _colprint(['pub cache', privatePath(pathToPubCache)]);\n\n    _colprint(\n      ['PUB_CACHE Env', '${envs.containsKey(PubCache.envVarPubCache)}'],\n    );\n  }\n\n  void _printExePaths() {\n    final pathToDCli = DCliPaths().pathToDCli;\n    _colprint([\n      'dcli path',\n      if (pathToDCli == null) 'Not found' else privatePath(pathToDCli)\n    ]);\n    _colprint(\n        ['dart exe path', privatePath(DartSdk().pathToDartExe ?? 'not found')]);\n\n    final dartPath = which(DartSdk.dartExeName).path;\n    _colprint([\n      'dart path',\n      privatePath(DartSdk().pathToDartExe ?? 'not found'),\n      'which: ${privatePath(dartPath ?? 'not found')}'\n    ]);\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['compiler', \"using 'dart compile exe'\"]);\n    } else {\n      _colprint(['compiler', \"using 'dart2native'\"]);\n      final dart2NativePath = which(DartSdk.dart2NativeExeName).path;\n\n      if (dart2NativePath != null) {\n        _colprint([\n          'dart2Native path',\n          privatePath(DartSdk().pathToDartToNativeExe ?? 'not found'),\n          'which: ${privatePath(dart2NativePath)}'\n        ]);\n      } else {\n        _colprint([\n          'dart2Native path',\n          'Not Found',\n        ]);\n      }\n    }\n    print('');\n\n    if (DartSdk().useDartCommand) {\n      _colprint(['pub', \"using 'dart pub'\"]);\n    } else {\n      final pubPath = which(DartSdk.pubExeName).path;\n\n      if (pubPath != null) {\n        _colprint([\n          'pub path',\n          privatePath(DartSdk().pathToPubExe ?? 'not found'),\n          'which: ${privatePath(pubPath)}'\n        ]);\n      } else {\n        _colprint([\n          'pub path',\n          'not Found',\n        ]);\n      }\n      _colprint(['Pub cache', privatePath(PubCache().pathTo)]);\n    }\n  }\n\n  void _printPlatform() {\n    _colprint(['os', Platform.operatingSystem]);\n    print(\n      Format().row(\n        ['os version', Platform.operatingSystemVersion],\n        widths: [17, -1],\n      ),\n    );\n    _colprint(['path separator', Platform.pathSeparator]);\n    print('');\n    _colprint(['dart version', DartSdk().version]);\n  }\n\n  void _colprint(List<String?> cols) {\n    //cols[0] = green(cols[0]);\n    print(Format().row(cols, widths: [17, 55], delimiter: ' '));\n  }\n\n  @override\n  String description({bool extended = false}) => \"\"\"\nRunning 'dcli doctor' provides diagnostic information on your install \n   and optionally a specific script.\"\"\";\n\n  @override\n  String usage() => 'doctor [<script path.dart>]';\n\n  @override\n  List<String> completion(String word) => completionExpandScripts(word);\n\n  void _showPermissions(String label, String path) {\n    var finallabel = label;\n    if (exists(path)) {\n      final fstat = stat(path);\n\n      final owner = _Owner(path);\n\n      finallabel = label.padRight(20);\n\n      final username = Shell.current.loggedInUser;\n      if (username != null) {\n        print(\n          Format().row(\n            [\n              finallabel,\n              fstat.modeString(),\n              '<user>:${owner.group == owner.user ? '<user>' : owner.group}',\n              '${privatePath(path)} '\n            ],\n            widths: [17, 9, 16, -1],\n            alignments: [\n              TableAlignment.left,\n              TableAlignment.left,\n              TableAlignment.middle,\n              TableAlignment.left\n            ],\n          ),\n        );\n      }\n    } else {\n      _colprint([finallabel, '${privatePath(path)} does not exist']);\n    }\n  }\n\n  @override\n  List<Flag> flags() => [];"}
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:05.155993 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:05.155993
[ReorderMembersFix] 2025-10-18T11:45:13.134773 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.134773 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.134773 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.134773
[ReorderMembersFix] 2025-10-18T11:45:13.135275 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.135275 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.135275 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.135275
[ReorderMembersFix] 2025-10-18T11:45:13.135841 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.135841 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.135841 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.135841
[ReorderMembersFix] 2025-10-18T11:45:13.136509 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.136509 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.136509 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.136509
[ReorderMembersFix] 2025-10-18T11:45:13.136889 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.136889 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.136889 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.136889
[ReorderMembersFix] 2025-10-18T11:45:13.137183 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.137183 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.137183 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.137183
[ReorderMembersFix] 2025-10-18T11:45:13.137723 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.137723 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.137723 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.137723
[ReorderMembersFix] 2025-10-18T11:45:13.137934 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.137934 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.137934 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.137934
[ReorderMembersFix] 2025-10-18T11:45:13.138116 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.138116 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.138116 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.138116
[ReorderMembersFix] 2025-10-18T11:45:13.138288 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.138288 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.138288 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.138288
[ReorderMembersFix] 2025-10-18T11:45:13.170461 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.170461 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.170461 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.170461
[ReorderMembersFix] 2025-10-18T11:45:13.170735 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.170735 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.170735 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.170735
[ReorderMembersFix] 2025-10-18T11:45:13.481762 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.481762 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.481762 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.481762
[ReorderMembersFix] 2025-10-18T11:45:13.482375 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.482375 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.482375 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.482375
[ReorderMembersFix] 2025-10-18T11:45:13.482556 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.482556 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.482556 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.482556
[ReorderMembersFix] 2025-10-18T11:45:13.482665 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.482665 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.482665 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.482665
[ReorderMembersFix] 2025-10-18T11:45:13.482986 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.482986 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.482986 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.482986
[ReorderMembersFix] 2025-10-18T11:45:13.483466 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.483466 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.483466 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.483466
[ReorderMembersFix] 2025-10-18T11:45:13.483773 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.483773 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.483773 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.483773
[ReorderMembersFix] 2025-10-18T11:45:13.483868 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.483868 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.483868 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.483868
[ReorderMembersFix] 2025-10-18T11:45:13.485285 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.485285 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.485285 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.485285
[ReorderMembersFix] 2025-10-18T11:45:13.485795 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.485795 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.485795 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.485795
[ReorderMembersFix] 2025-10-18T11:45:13.486032 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.486032 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.486032 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.486032
[ReorderMembersFix] 2025-10-18T11:45:13.486728 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:13.486728 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:13.486728 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:13.486728
[ReorderMembersFix] 2025-10-18T11:45:14.242341 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.242341 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.242341 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.242341
[ReorderMembersFix] 2025-10-18T11:45:14.242916 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.242916 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.242916 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.242916
[ReorderMembersFix] 2025-10-18T11:45:14.243213 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.243213 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.243213 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.243213
[ReorderMembersFix] 2025-10-18T11:45:14.243380 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.243380 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.243380 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.243380
[ReorderMembersFix] 2025-10-18T11:45:14.244141 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.244141 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.244141 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.244141
[ReorderMembersFix] 2025-10-18T11:45:14.245131 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.245131 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.245131 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.245131
[ReorderMembersFix] 2025-10-18T11:45:14.245412 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.245412 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.245412 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.245412
[ReorderMembersFix] 2025-10-18T11:45:14.245522 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.245522 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.245522 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.245522
[ReorderMembersFix] 2025-10-18T11:45:14.245890 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.245890 ConflictingEditException: {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"} conflicts with {"offset":7926,"length":353,"replacement":"  static const _flagName = 'noprivileges';\n\n  const _NoPrivilegesFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'np';\n\n  @override\n  String description() => '''\n      Allows the install to be run without privileges. This flag is primarily used for unit testing.\n      Some features will not be available if you run in this mode.''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.245890 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.245890
[ReorderMembersFix] 2025-10-18T11:45:14.246434 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.246434 ConflictingEditException: {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"} conflicts with {"offset":482,"length":6808,"replacement":"  static const _commandName = 'install';\n\n  final _installFlags = const [\n    _NoDartFlag(),\n    _QuietFlag(),\n    _NoPrivilegesFlag()\n  ];\n\n  /// holds the set of flags passed to the compile command.\n  Flags flagSet = Flags();\n\n  /// set by the [_QuietFlag].\n  /// if [_quiet] is true only errors are displayed during the install.\n  bool _quiet = false;\n\n  /// set by the [_NoDartFlag].\n  /// If [_installDart] is false then we won't attempt to install dart.\n  bool _installDart = true;\n\n  bool _requirePrivileges = false;\n\n  /// ctor.\n  InstallCommand() : super(_commandName);\n\n  @override\n  Future<int> run(List<Flag> selectedFlags, List<String> subarguments) async {\n    var scriptIndex = 0;\n\n    final shell = Shell.current;\n\n    // check for any flags\n    int i;\n    for (i = 0; i < subarguments.length; i++) {\n      final subargument = subarguments[i];\n\n      if (Flags.isFlag(subargument)) {\n        final flag = flagSet.findFlag(subargument, _installFlags);\n\n        if (flag != null) {\n          if (flagSet.isSet(flag)) {\n            throw DuplicateOptionsException(subargument);\n          }\n          flagSet.set(flag);\n          verbose(() => 'Setting flag: ${flag.name}');\n          continue;\n        } else {\n          throw UnknownFlag(subargument);\n        }\n      }\n\n      break;\n    }\n    scriptIndex = i;\n\n    if (subarguments.length != scriptIndex) {\n      throw InvalidCommandArgumentException(\n        \"'dcli install' does not take any arguments. Found $subarguments\",\n      );\n    }\n\n    _requirePrivileges = !flagSet.isSet(const _NoPrivilegesFlag());\n\n    /// We need to be priviledged for a number of operations\n    if (_requirePrivileges && !shell.isPrivilegedUser) {\n      _qprint(shell.privilegesRequiredMessage('dcli_install'));\n      dcliExit(1);\n    }\n\n    shell.releasePrivileges();\n\n    _quiet = flagSet.isSet(const _QuietFlag());\n    _installDart = !flagSet.isSet(const _NoDartFlag());\n\n    if (_quiet) {\n      print('Installing DCli v$packageVersion ...');\n    }\n    _qprint(\n      green('Hang on a tick whilst we install DCli ${Settings().version}'),\n    );\n\n    _qprint('');\n\n    final conditions = shell.checkInstallPreconditions();\n    if (conditions != null) {\n      printerr(red('*' * 80));\n      printerr(red(conditions));\n      printerr(red('*' * 80));\n      dcliExit(1);\n    }\n    // install dart and dcli\n    final dartWasInstalled = await shell.install(installDart: _installDart);\n\n    // Create the ~/.dcli root.\n    if (!exists(Settings().pathToDCli)) {\n      _qprint(\n        '${blue('Creating')} ${green('.dcli')} '\n        '${blue('directory: ${Settings().pathToDCli}')}',\n      );\n      createDir(Settings().pathToDCli);\n    } else {\n      _qprint(blue('Found existing install at: ${Settings().pathToDCli}.'));\n    }\n    _qprint('');\n\n    initTemplates(_qprint);\n\n    // create the bin directory\n    final binPath = Settings().pathToDCliBin;\n    if (!exists(binPath)) {\n      _qprint('');\n      _qprint(\n        '${blue('Creating ${green('bin')} ')}'\n        '${blue('directory: $binPath.')}',\n      );\n      createDir(binPath);\n    }\n\n    final wasOnPath = Env().isOnPATH(binPath);\n    // check if shell can add a path.\n    if (shell.canModifyPath && shell.appendToPATH(binPath)) {\n      if (!wasOnPath) {\n        _qprint(\n          orange(\n            'You will need to restart your terminal '\n            'for DCli to be on your PATH.',\n          ),\n        );\n      }\n    } else {\n      _qprint(\n        orange(\n          'If you want to use dcli compile -i to install scripts, '\n          'add $binPath to your PATH.',\n        ),\n      );\n    }\n\n    shell.addFileAssocation(binPath);\n    _qprint('');\n\n    if (shell.isCompletionSupported) {\n      if (!shell.isCompletionInstalled) {\n        shell.installTabCompletion();\n      }\n    }\n\n    // the dcli executable has just been installed by dart pub global activate\n    final dcliLocation = join(PubCache().pathToBin, DCliPaths().dcliName);\n    // check if dcli is on the path\n    if (!exists(dcliLocation)) {\n      print('');\n      print('ERROR: dcli was not found on your path!');\n      print(\"Try running 'dart pub global activate dcli_sdk' again.\");\n      print('  otherwise');\n      print('Try to resolve the problem and then run dcli install again.');\n      print('dcli is normally located in ${PubCache().pathToBin}');\n\n      if (!PATH.contains(PubCache().pathToBin)) {\n        print('Your path does not contain ${PubCache().pathToBin}');\n      }\n      dcliExit(1);\n    } else {\n      final dcliPath = dcliLocation;\n      _qprint(blue('dcli found in : $dcliPath.'));\n\n      // if (_requirePrivileges) {\n      //   symlinkDCli(shell, dcliPath);\n      // }\n    }\n    _qprint('');\n\n    _fixPermissions(shell);\n\n    // qprint('Copying dcli (${Platform.executable}) to /usr/bin/dcli');\n    // copy(Platform.executable, '/usr/bin/dcli');\n\n    touch(Settings().installCompletedIndicator, create: true);\n\n    if (dartWasInstalled) {\n      _qprint('');\n      _qprint(\n        red('You need to restart your shell for the adjusted PATH to work.'),\n      );\n      _qprint('');\n    }\n\n    _qprint(red('*' * 80));\n    _qprint('');\n    // if (quiet) {\n    //   print('done.');\n    // }\n\n    _qprint('dcli installation complete.');\n\n    _qprint('');\n    _qprint(red('*' * 80));\n\n    _qprint('');\n    _qprint('Create your first dcli script using:');\n    _qprint(blue('  dcli create <scriptname>.dart'));\n    _qprint('');\n    _qprint(blue('  Run your script by typing:'));\n    _qprint(blue('  ./<scriptname>.dart'));\n\n    return 0;\n  }\n\n  /// Symlink so dcli works under sudo.\n  /// We use the location of dart exe and add dcli symlink\n  /// to the same location.\n  void symlinkDCli(Shell shell, String dcliPath) {\n    if (!core.Settings().isWindows) {\n      final linkPath = join(dirname(DartSdk().pathToDartExe!), 'dcli');\n      if (Shell.current.isPrivilegedPasswordRequired && !isWritable(linkPath)) {\n        print('Enter the sudo password when prompted.');\n      }\n\n      'ln -sf $dcliPath $linkPath'.start(privileged: !isWritable(linkPath));\n      // symlink(dcliPath, linkPath);\n    }\n  }\n\n  void _qprint(String? message) {\n    if (!_quiet) {\n      print(message);\n    }\n  }\n\n  @override\n  String description({bool extended = false}) =>\n      \"\"\"Running 'dcli install' completes the installation of dcli.\"\"\";\n\n  @override\n  String usage() => 'install';\n\n  @override\n  List<String> completion(String word) => <String>[];\n\n  @override\n  List<Flag> flags() => _installFlags;\n\n  void _fixPermissions(Shell shell) {\n    if (shell.isPrivilegedUser) {\n      if (!core.Settings().isWindows) {\n        final user = shell.loggedInUser;\n        if (user != 'root') {\n          'chown -R $user:$user ${Settings().pathToDCli}'.run;\n          'chown -R $user:$user ${PubCache().pathTo}'.run;\n        }\n      }\n    }\n  }"}
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.246434 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.246434
[ReorderMembersFix] 2025-10-18T11:45:14.247544 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.247544 ConflictingEditException: {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"} conflicts with {"offset":7327,"length":286,"replacement":"  static const _flagName = 'nodart';\n\n  const _NoDartFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'nd';\n\n  @override\n  String description() => '''\n      Stops the install from installing dart as part of the install.\n      This option is for testing purposes.''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.247544 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.247544
[ReorderMembersFix] 2025-10-18T11:45:14.247667 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/commands/install.dart:
[ReorderMembersFix] 2025-10-18T11:45:14.247667 ConflictingEditException: {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"} conflicts with {"offset":7649,"length":234,"replacement":"  static const _flagName = 'quiet';\n\n  const _QuietFlag() : super(_flagName);\n\n  @override\n  String get abbreviation => 'q';\n\n  @override\n  String description() => '''\n      Runs the install in quiet mode. Only errors are displayed''';"}
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:45:14.247667 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:45:14.247667
[ReorderMembersFix] 2025-10-18T11:46:15.291662 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.291662 ConflictingEditException: {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"} conflicts with {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"}
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.291662 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.291662
[ReorderMembersFix] 2025-10-18T11:46:15.291927 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.291927 ConflictingEditException: {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"} conflicts with {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"}
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.291927 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.291927
[ReorderMembersFix] 2025-10-18T11:46:15.292193 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.292193 ConflictingEditException: {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"} conflicts with {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"}
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.292193 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.292193
[ReorderMembersFix] 2025-10-18T11:46:15.292398 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.292398 ConflictingEditException: {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"} conflicts with {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"}
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.292398 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.292398
[ReorderMembersFix] 2025-10-18T11:46:15.292518 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.292518 ConflictingEditException: {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"} conflicts with {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"}
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.292518 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.292518
[ReorderMembersFix] 2025-10-18T11:46:15.292652 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.292652 ConflictingEditException: {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"} conflicts with {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"}
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.292652 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.292652
[ReorderMembersFix] 2025-10-18T11:46:15.729524 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.729524 ConflictingEditException: {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"} conflicts with {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"}
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.729524 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.729524
[ReorderMembersFix] 2025-10-18T11:46:15.729967 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.729967 ConflictingEditException: {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"} conflicts with {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"}
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.729967 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.729967
[ReorderMembersFix] 2025-10-18T11:46:15.730102 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.730102 ConflictingEditException: {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"} conflicts with {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"}
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.730102 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.730102
[ReorderMembersFix] 2025-10-18T11:46:15.730548 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.730548 ConflictingEditException: {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"} conflicts with {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"}
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.730548 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.730548
[ReorderMembersFix] 2025-10-18T11:46:15.730939 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.730939 ConflictingEditException: {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"} conflicts with {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"}
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.730939 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.730939
[ReorderMembersFix] 2025-10-18T11:46:15.731093 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:15.731093 ConflictingEditException: {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"} conflicts with {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"}
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:15.731093 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:15.731093
[ReorderMembersFix] 2025-10-18T11:46:16.609175 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:16.609175 ConflictingEditException: {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"} conflicts with {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"}
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609175 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:16.609175
[ReorderMembersFix] 2025-10-18T11:46:16.609341 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:16.609341 ConflictingEditException: {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"} conflicts with {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"}
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609341 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:16.609341
[ReorderMembersFix] 2025-10-18T11:46:16.609557 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:16.609557 ConflictingEditException: {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"} conflicts with {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"}
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609557 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:16.609557
[ReorderMembersFix] 2025-10-18T11:46:16.609851 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:16.609851 ConflictingEditException: {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"} conflicts with {"offset":4748,"length":646,"replacement":"  static const _flagName = 'help';\n\n  static final _self = HelpFlag._internal();\n\n  String? _option;\n\n  ///\n  factory HelpFlag() => _self;\n\n  ///\n  HelpFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => false;\n\n  @override\n  set option(String? value) {}\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName';\n\n  @override\n  String description() => '''\n      Displays this help message.\n''';"}
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:104:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609851 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:16.609851
[ReorderMembersFix] 2025-10-18T11:46:16.609984 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:16.609984 ConflictingEditException: {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"} conflicts with {"offset":2023,"length":1452,"replacement":"  final String _name;\n\n  ///\n  const Flag(this._name);\n\n  /// name of the flag\n  String get name => _name;\n\n  /// abbreviation for the flag.\n  String get abbreviation;\n\n  /// return true if the flag can take a value\n  /// after an equals sign\n  /// e.g. -v=/var/log/syslog\n  bool get isOptionSupported => false;\n\n  /// returns the usage for this flag\n  String usage() => '--$_name | -$abbreviation';\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  bool operator ==(covariant Flag other) => other.name == _name;\n\n  @override\n  // we only depend on immutable fields.\n  //ignore: avoid_equals_and_hash_code_on_mutable_classes\n  int get hashCode => name.hashCode;\n\n  /// [Flag] implementations must overload this to return a\n  /// description of the flag used in the usage statement.\n  String description();\n\n  /// Called if an option is passed to a flag\n  /// and the flag supports options.\n  /// If the option value is invalid then throw a\n  /// InvalidFlagOption exception.\n\n  /// Override this method if your flag takes an optional argument\n  /// after an = sign.\n  ///\n  set option(String? value) {\n    assert(\n      !isOptionSupported,\n      'You must implement option setter for $_name flag',\n    );\n  }\n\n  /// override this method if your flag takes an optional argument\n  /// after an = sign.\n  /// this method should reutrn the value after the = sign.\n  String? get option => null;"}
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:16.609984 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:16.609984
[ReorderMembersFix] 2025-10-18T11:46:16.611259 Plugin ReorderMembersFix threw while analyzing /home/bsutton/git/dcli/dcli_sdk/lib/src/script/flags.dart:
[ReorderMembersFix] 2025-10-18T11:46:16.611259 ConflictingEditException: {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"} conflicts with {"offset":3516,"length":1198,"replacement":"  static const _flagName = 'verbose';\n\n  static final _self = VerboseFlag._internal();\n\n  String? _option;\n\n  ///\n  factory VerboseFlag() => _self;\n\n  ///\n  VerboseFlag._internal() : super(_flagName);\n\n  @override\n  // Path to the logfile to write verbose log messages to.\n  String get option => _option!;\n\n  /// true if the flag has an option.\n  bool get hasOption => _option != null;\n\n  @override\n  bool get isOptionSupported => true;\n\n  @override\n  set option(String? value) {\n    // check that the value contains a path and that\n    // the path exists.\n    if (!exists(dirname(value!))) {\n      throw InvalidFlagOptionException(\n        \"The log file's directory '${truepath(dirname(value))} \"\n        'does not exists. '\n        'Create the directory first.',\n      );\n    } else {\n      _option = value;\n      touch(value, create: true);\n      value.truncate();\n    }\n  }\n\n  @override\n  String get abbreviation => 'v';\n\n  @override\n  String usage() => '--$_flagName[=<log path>] | -$abbreviation[=<log path>]';\n\n  @override\n  String description() => '''\n      If passed, turns on verbose logging to the console.\n      If you provide a log path then logging is written to the given logfile.''';"}
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #0      addEditForSource (package:analyzer_plugin/src/protocol/protocol_internal.dart:77:7)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #1      SourceFileEdit.add (package:analyzer_plugin/protocol/protocol_common.dart:3778:7)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #2      FileEditBuilderImpl._addEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:624:14)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #3      FileEditBuilderImpl._addEditBuilder (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:639:5)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #4      FileEditBuilderImpl.addSimpleReplacement (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:581:7)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #5      ReorderMembersFix.run.<anonymous closure>.applyTo (package:lint_hard/src/reorder_members_fix.dart:97:17)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #6      ReorderMembersFix.run.<anonymous closure> (package:lint_hard/src/reorder_members_fix.dart:110:11)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #7      ChangeBuilderImpl.addDartFileEdit (package:analyzer_plugin/src/utilities/change_builder/change_builder_core.dart:170:26)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #8      ChangeBuilderImpl.addDartFileEdit.<anonymous closure> (package:custom_lint_core/src/change_reporter.dart:242:35)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #9      new Future.<anonymous closure> (dart:async/future.dart:260:40)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #10     _rootRun (dart:async/zone.dart:1517:47)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #11     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #12     _CustomZone.runGuarded (dart:async/zone.dart:1321:7)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #13     _CustomZone.bindCallbackGuarded.<anonymous closure> (dart:async/zone.dart:1362:23)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #14     _rootRun (dart:async/zone.dart:1525:13)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #15     _CustomZone.run (dart:async/zone.dart:1422:19)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #16     _CustomZone.bindCallback.<anonymous closure> (dart:async/zone.dart:1345:23)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #17     Timer._createTimer.<anonymous closure> (dart:async-patch/timer_patch.dart:18:15)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #18     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:423:19)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #19     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:454:5)
[ReorderMembersFix] 2025-10-18T11:46:16.611259 #20     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:193:12)
[ReorderMembersFix] 2025-10-18T11:46:16.611259
